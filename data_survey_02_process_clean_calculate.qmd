---
title: "Creation of Combined Data Set"
date: "2022-10-02 <br> Updated: `r Sys.Date()`"
format: pdf
editor: 
  markdown: 
    wrap: sentence
---

# ‚≠êÔ∏èOverview - üî¥  TO EDIT

This file is used for [PLACEHOLDER]

[Notes on cleaning individual L2C data sets for merging](https://github.com/brad-cannell/link2care_public/wiki/Notes-on-cleaning-individual-L2C-data-sets-for-merging)

Notes and guide for how to use **variable map** functions, with examples found in: guide_01_variable_map_functions.qmd

# Notes

In order to process our data frames into a combined data frame, we had to perform some initial cleaning and wrangling within our source data sets.
Within each data set, we needed to:

-   Ensure each row represented a unique combination of Subject ID and Visit Number

-   If there were duplicated or repetitive variables (i.e., three variables representing the same item, but divided for presentation to subjects in group 1, 2, or 3 respectively) should be combined into a single variable, if possible

## üïí Change Log

**2023-10-13**, file initialized. QDS data imported with initial checks. 

## üî¥üî¥üî¥ Notes for Brad from Morri (2023-10-13)

-   This is still a work in progress

# üì¶Load packages & Functions

```{r, message=FALSE, warning=FALSE}
library(dplyr, warn.conflicts = FALSE)
library(purrr, warn.conflicts = FALSE)
library(haven, warn.conflicts = FALSE)
library(here, warn.conflicts = FALSE)
library(tidyverse, warn.conflicts = FALSE)
library(readr, warn.conflicts = FALSE)
library(readxl, warn.conflicts = FALSE)
library(openxlsx, warn.conflicts = FALSE)
library(stringr, warn.conflicts = FALSE)
```

```{r}
source(here("R", "standardize_col_names.R"))
source(here("R", "flag_unmatching_variables.R"))
source(here("R", "vm_make_source_map.R"))
source(here("R", "vm_check.R"))
source(here("R", "vm_create_for_instrument.R"))
source(here("R", "vm_join_inst_section.R"))
source(here("R", "vm_join_sections.R"))
source(here("R", "vm_add_variable.R"))
source(here("R", "vm_delete_variable.R"))
source(here("R", "vm_process_source_df.R"))
source(here("R", "vm_process_many_source.R"))
```

# üì• Import data

## QDS

-   Import all 5 QDS data frames.
-   These datasets were exported directly from QDS as SPSS files (.SAV), and they have already been run through an SPSS syntax file (`spss_syntax/Visit 1.sps`, `spss_syntax/Visit 2.sps`, etc.).
-   The data was exported from QDS by someone other than MBC.
-   The SPSS syntax files were created by someone other than MBC.

```{r}
qds_spss_path <- here("data", "qds")
qds_spss_paths <- paste0(qds_spss_path, "Visit_", 1:5, "_Data.SAV")
```

Check the most recent file modification dates and print for user when this file is being sourced.

```{r}
walk(
  .x = c(1:5),
  .f = function(x) {
    sav_nm <- paste0("Visit_", x, "_Data.SAV")
    path <- here(qds_spss_path, sav_nm)
    cat(
      sav_nm, "last modified on OneDrive", 
      as.character(file.info(path)$mtime), "\n"
    )
  }
)

# Visit_1_Data.SAV last modified on OneDrive 2023-08-25 10:55:05 
# Visit_2_Data.SAV last modified on OneDrive 2023-08-25 10:55:05 
# Visit_3_Data.SAV last modified on OneDrive 2023-08-25 10:55:05 
# Visit_4_Data.SAV last modified on OneDrive 2023-08-25 10:55:05 
# Visit_5_Data.SAV last modified on OneDrive 2023-08-25 10:55:05
```

Import the data

```{r}
walk(
  .x = c(1:5),
  .f = function(x) {
    new_nm <- paste0("v", x)
    sav_nm <- paste0("Visit_", x, "_Data.SAV")
    path <- here(qds_spss_path, sav_nm)
    assign(new_nm, read_sav(path), envir = .GlobalEnv)
  }
)
```

Print a message for when this file is being sourced

```{r}
walk(
  .x = c(1:5),
  .f = function(x) {
    df_nm <- paste0("v", x)
    df <- get(df_nm, envir = .GlobalEnv)
    # Print a message for when this file is being sourced
    cat(
      paste0(Sys.Date(), ":"),
      df_nm, "imported with", nrow(df), "rows and", ncol(df), "columns.\n"
    )
  }
)

# Data check:
# 2023-10-09: v1 imported with 442 rows and 810 columns.
# 2023-10-09: v2 imported with 406 rows and 213 columns.
# 2023-10-09: v3 imported with 273 rows and 542 columns.
# 2023-10-09: v4 imported with 207 rows and 598 columns.
# 2023-10-09: v5 imported with 178 rows and 649 columns.
```

## REDCap

Several subjects completed visits within REDCap, rather than QDS.
We imported the REDCap data set.

```{r}
redcap_spss_path <- here("data", "redcap", "All_Visits_Redcap.sav")
```

Import the data.
Check the most recent file modification dates and print for user when this file is being sourced.

```{r message=FALSE}
redcap <- read_sav(redcap_spss_path)

# Print a message for when this file is being sourced
cat(
  paste0(Sys.Date(), ":"),
  "REDCap imported with", nrow(redcap), "rows and", ncol(redcap), "columns.\n"
)

# Check the most recent file modification dates and print for user when this
# file is being sourced.

cat(
      "REDCap data last modified on OneDrive", 
      as.character(file.info(redcap_spss_path)$mtime), "\n"
    )

# 2023-10-09: REDCap imported with 119 rows and 845 columns.
# REDCap data last modified on OneDrive 2023-08-25 10:56:25 
```

## Excel Master Log

To ensure group assignment was consistent for subjects, we imported the subject and group assignments from the Excel Master log data.
Group membership was randomly assigned at Visit 2, but it is not recorded in QDS or REDCap until visit 3 and beyond.
Therefore, if we only rely on QDS or REDCap data, it appears as though many participants haven't been randomized to a group even though they have.
The study staff manually tracks group assignment in the Excel Master Log.
We can use that data to cross-check and impute group membership when QDS and REDCap data are not otherwise sufficient.
It is not ideal, but it seems to be the best option we have.
The Master Log also appears to be the only source of values for each subject's age.

```{r}
master_log_path  <- here("data", "master_log", "master_log.xlsx")
```

Import the data.
Check the most recent file modification dates and print for user when this file is being sourced.

```{r}
master_log <- read_excel(
  master_log_path, 
  sheet = "Screened In",
  col_names = c("id", "group", "age"),
  col_types = c(
    "text", rep("skip", 22), "text", rep("skip", 9), "text", rep("skip", 21)
                ),
  skip = 1
) %>% 
  # Coerce group to numeric so that it can be combined with the QDS data.
  mutate(
    group = case_when(
      group == "UCM"    ~ 1,
      group == "UCM+SP" ~ 2,
      group == "L2C"    ~ 3
    )
  ) %>%
  # Coerce age to a numeric
  mutate(age = as.numeric(age)) %>%
  # Remove empty rows
  filter(!is.na(id))

# Print a message for when this file is being sourced
cat(
  paste0(Sys.Date(), ":"),
  "Master log imported with", nrow(master_log), "rows and", ncol(master_log),
  "columns.\n"
)

# Check the most recent file modification dates and print for user when this
# file is being sourced.

cat(
      "Master log last modified on OneDrive", 
      as.character(file.info(master_log_path)$mtime), "\n"
    )

# 2023-10-11: Master log imported with 442 rows and 3 columns.
# Master log last modified on OneDrive 2023-09-28 11:52:59 
```

## Timeline Follow Back (TLFB)

All Timeline Follow Back (TLFB) section data was stored separately.

```{r}
tlfb_spss_path <- here("data", "tlfb", "TLFB_Database.sav")
```

Import the data.
Check the most recent file modification dates and print for user when this file is being sourced.

```{r message=FALSE}
tlfb <- read_sav(tlfb_spss_path)

# Print a message for when this file is being sourced
cat(
  paste0(Sys.Date(), ":"),
  "TLFB imported with", nrow(tlfb), "rows and", ncol(tlfb), "columns.\n"
)

# Check the most recent file modification dates and print for user when this
# file is being sourced.

cat(
      "TLFB data last modified on OneDrive", 
      as.character(file.info(tlfb_spss_path)$mtime), "\n"
    )

# 2023-10-11: TLFB imported with 1768 rows and 21 columns.
# TLFB data last modified on OneDrive 2023-08-25 10:56:58 
```

## Delay Discount Task (DDT)

All Delayed Discount Task (DDT) section data was initially processed with SPSS.

```{r}
ddt_spss_path <- here("data", "ddt", "L2C_DDT_Database_1.sav")
```

Import the data.
Check the most recent file modification dates and print for user when this file is being sourced.

```{r message=FALSE}
ddt <- read_sav(ddt_spss_path)

# Print a message for when this file is being sourced
cat(
  paste0(Sys.Date(), ":"),
  "DDT imported with", nrow(ddt), "rows and", ncol(ddt), "columns.\n"
)

# Check the most recent file modification dates and print for user when this
# file is being sourced.

cat(
      "DDT data last modified on OneDrive", 
      as.character(file.info(ddt_spss_path)$mtime), "\n"
    )

# 2023-10-11: DDT imported with 442 rows and 9 columns.
# DDT data last modified on OneDrive 2023-08-25 10:44:11 
```

## Variable Map

We imported our Variable Map for use in processing.

```{r}
variable_map_path <- here(
  "data", "Combined Participant Data", "variable_map.rds"
  )

variable_map <- readRDS(variable_map_path)

# Print a message for when this file is being sourced
cat(
  paste0(Sys.Date(), ":"),
  "Variable Map imported with", nrow(variable_map), "rows and", 
  ncol(variable_map), "columns.\n"
)

# Check the most recent file modification dates and print for user when this
# file is being sourced.

cat(
      "Variable Map data last modified on OneDrive", 
      as.character(file.info(variable_map_path)$mtime), "\n"
    )
```

We removed containers that were no longer necessary.

```{r}
rm(qds_spss_path)
rm(qds_spss_paths)
rm(master_log_path)
rm(redcap_spss_path)
rm(tlfb_spss_path)
rm(ddt_spss_path)
rm(variable_map_path)
```

# Initial Source Processing and Cleaning

## Removal of Labels from the Variable Map Itself

We removed the labels from the Variable Map itself, to avoid issues calling attribute values using "pull()" with pipes.

```{r}
for (i in 1:length(colnames(variable_map))){
    attributes(variable_map[[i]])$label <- NULL
}
```

## QDS

We packaged our QDS source data for aggregated cleaning and processing.

```{r}
source_list <- list(
  'qds_v1' = v1, 'qds_v2' =  v2, 'qds_v3' = v3, 'qds_v4' = v4, 'qds_v5' = v5
  )

dropping_vars <- list(
  'qds_v1' = setdiff(colnames(v1), na.omit(variable_map$qds_v1)),
  'qds_v2' = setdiff(colnames(v2), na.omit(variable_map$qds_v2)),
  'qds_v3' = setdiff(colnames(v3), na.omit(variable_map$qds_v3)),
  'qds_v4' = setdiff(colnames(v4), na.omit(variable_map$qds_v4)),
  'qds_v5' = setdiff(colnames(v5), na.omit(variable_map$qds_v5))
  )

qds_packaged <- list(
  'source_df' = source_list,
  'source_df_col' = names(source_list),
  'excluding_vars' = dropping_vars
)
```

We processed our combined QDS Data set using the Variable Map. We received a warning that there were variables with conflicting value labels.

```{r}
qds_data <- vm_process_many_source(variable_map, qds_packaged)

# Warning: `..1$read_3` and `..2$read_3` have conflicting value labels.
# ‚Ñπ Labels for these values will be taken from `..1$read_3`.
# ‚úñ Values: 0Warning: `..1$read_3` and `..2$read_3` have conflicting value 
# labels.
# ‚Ñπ Labels for these values will be taken from `..1$read_3`.
# ‚úñ Values: 0Warning: `..1$read_3` and `..2$read_3` have conflicting value 
# labels.
# ‚Ñπ Labels for these values will be taken from `..1$read_3`.
# ‚úñ Values: 0Warning: `..1$read_3` and `..2$read_3` have conflicting value 
# labels.
# ‚Ñπ Labels for these values will be taken from `..1$read_3`.
# ‚úñ Values: 0
```

We ensured our variables had our desired label and value labels attributes.

```{r}
for (var_name in colnames(qds_data)){
  attributes(
    qds_data[[var_name]]
    )$label <- pull(
      variable_map[variable_map$variable == var_name, 'attr_label']
      )
   attributes(
     qds_data[[var_name]]
     )$labels <- pull(
       variable_map[variable_map$variable == var_name, 'attr_var_labels']
       )[[1]] 
}
```

We checked to determine if all rows had a unique combination of Subject ID and Row.
The check was passed.

```{r}
## DATA CHECK: Checking if all rows have a unique combination of subject ID
## and visit number

nrow(
  qds_data %>%
    select(subject, visit) %>%
    distinct() %>%
    mutate(key = paste(subject, visit)) %>%
    filter(duplicated(key)|duplicated(key, fromLast = TRUE))
) == 0
# TRUE
```

## REDCap

We processed our REDCap data set using our variable map.

```{r}
redcap_data <- vm_process_source_df(
  variable_map, redcap, 'redcap', setdiff(
    colnames(redcap), variable_map$redcap
    )
  )
```

We ensured our variables had our desired label and value labels attributes.

```{r}
for (var_name in colnames(redcap_data)){
  attributes(
    redcap_data[[var_name]]
    )$label <- pull(
      variable_map[variable_map$variable == var_name, 'attr_label']
      )
   attributes(
     redcap_data[[var_name]]
     )$labels <- pull(
       variable_map[variable_map$variable == var_name, 'attr_var_labels']
       )[[1]] 
}
```

The REDCAP data contained testing subjects, which all contained the term 'test' or were otherwise strings. We coerced 'subject' field to a numeric, converting these strings into empty values. We then dropped the 'test' rows.

```{r}
redcap_data <- redcap_data %>%
  mutate(subject = as.numeric(subject)) %>%
  filter(!is.na(subject))

# Warning: There was 1 warning in `mutate()`.
# ‚Ñπ In argument: `subject = as.numeric(subject)`.
# Caused by warning:
# ! NAs introduced by coercion
```

The REDCap data had a key variable, `redcap_event_name`, which duplicated `visit`. Prior to dropping this variable, we checked to see if it was consistent across all visits. We found that there were issues that required manual verification.

```{r}
# DATA CHECK: ensure visit number in 'redcap_event_name' matches visit number
# in the 'visit' variable

checking <- redcap_data %>%
  mutate(
    redcap_event_name = stringr::str_replace_all(
      redcap_event_name, '(baseline)', 'visit_1')
    ) %>%
  mutate(
    rc_visit = as.numeric(stringr::str_match(
      redcap_event_name, '([0-9]+)_arm_([0-9]+)')[,2])
    
  ) %>%
  mutate(visit_match = ifelse((visit == rc_visit | is.na(visit)), TRUE, FALSE)
         ) %>%
  filter(!visit_match)

nrow(checking) == 0
# FALSE
```

We found that:
-   Subject 2403 was listed as visit 2 for 'visit_5_arm_1' in REDCap.
    -   This subject had Visits 1 and 2 in the QDS data
    -   This subject was listed as a no-show for Visits 3 and 4 in the Master Log, with Visits 1, 2, and 5 completed.
    -   The date for the REDCap 'visit_5_arm_1' is closest to the the date originally scheduled for Visit 3 per the Master Log.
    -   The questions answered in the REDCap data are consistent with Visit 5. Visit 3 variables contained missing values.
    -   We revised this entry to show it was for Visit 5, with the date in the Master Log
-   Subject 2349 was listed as Visit 1 for 'visit_4_arm_1' in REDCap
    -   This subject had Visits 1, 2, and 5 in the QDS data
    -   This subject was listed as a no-show for Visit 3 in the Master Log, with Visits 1, 2, 4 and 5 completed.
    -   The date for the REDCAP 'visit_4_arm_1' is closest to the date originally scheduled for Visit 3 per the Master Log.
    -   The questions answered in REDCAP data are consistent with Visit 4. Visit 1 variables contained missing values.
    -   We revised this entry to show it was for Visit 4, with the date in the Master Log

```{r}
checking_subjects <- unique(checking$subject)

```

# üî¥ - PLACEHOLDER (2023-10-13)


### Collapsing Duplicated Variables - üî¥ Move maybe?

The original coding of the Treatment Quality and Satisfaction Survey created separate variables for the same questions when presented to members of each study group (i.e., "tq_1_1", "tq_1_2", and "tq_1_3" present the same question to members of group 1, group 2, and group 3 respectively). For analysis, we need to combine these variables into a single variable. We also see that there are 18 unique questions.

```{r}
survey_vars <- pull(variable_map %>%
  filter(instrument == "Treatment Quality and Satisfaction Survey") %>%
  select(variable))

survey_vars
```

We checked our miss pattern in detail, and found that there were no occurrences of a single visit having a data value for more than one version of the same question.

```{r}
answer_pattern <- tibble::tibble(!!!c('item', 'group', 'total_ans'), .rows = 0,
                                 .name_repair = ~c('item', 'group', 'total_ans'))

inst_prefix <- "tq_"

num_vars <- 18

for (step_num in 1:num_vars) {

  item_prefix <- paste(inst_prefix, step_num, "_", sep = "")
  
  item_vars <- qds_data %>%
    select(all_of(starts_with(item_prefix))) %>%
    names()
  
  temp_set <- qds_data %>%
    select(subject, group, visit, all_of(item_vars)
           ) %>%
    select(-c(subject,visit)) %>%
    mutate(total_ans = rowSums(!is.na(across(all_of(item_vars)))),
           item = item_prefix
           ) %>%
    select(item, group, total_ans) %>%
    distinct() %>%
    arrange(group)
  
  answer_pattern <- rbind(answer_pattern, temp_set)
  
  rm(item_vars)
  rm(item_prefix)
  rm(temp_set)

}

## DATA CHECK: There should not be any row with more than one response in these variables

nrow(
  answer_pattern %>%
  filter(total_ans > 1)
) == 0
# TRUE
```

We identified the 18 variables we wished to combine all duplicated questions into - the first occurrence of each question. Questions 1-14 are numeric, and questions 15-18 are text-based.

```{r}
survey_vars[1:18]

qds_all_visits %>%
  select(all_of(survey_vars)) %>%
  mutate(across(everything(), typeof)) %>%
  distinct()
```

We consolidated these variables in our combined data set. We also added a column to our variable map, indicating if a variable was dropped due to consolidation.

```{r}
qds_all_visits <- qds_all_visits %>%
  mutate(
    tq_1_1 = rowSums(select(., all_of(starts_with("tq_1_"))), na.rm = TRUE),
    tq_2_1 = rowSums(select(., all_of(starts_with("tq_2_"))), na.rm = TRUE),
    tq_3_2  = rowSums(select(., all_of(starts_with("tq_3_"))), na.rm = TRUE),
    tq_4_2 = rowSums(select(., all_of(starts_with("tq_4_"))), na.rm = TRUE),
    tq_5_3 = rowSums(select(., all_of(starts_with("tq_5_"))), na.rm = TRUE),
    tq_6_3 = rowSums(select(., all_of(starts_with("tq_6_"))), na.rm = TRUE),
    tq_7_3 = rowSums(select(., all_of(starts_with("tq_7_"))), na.rm = TRUE),
    tq_8_3 = rowSums(select(., all_of(starts_with("tq_8_"))), na.rm = TRUE),
    tq_9_2 = rowSums(select(., all_of(starts_with("tq_9_"))), na.rm = TRUE),
    tq_10_2 = rowSums(select(., all_of(starts_with("tq_10_"))), na.rm = TRUE),
    tq_11_2 = rowSums(select(., all_of(starts_with("tq_11_"))), na.rm = TRUE),
    tq_12_2 = rowSums(select(., all_of(starts_with("tq_12_"))), na.rm = TRUE),
    tq_13_2 = rowSums(select(., all_of(starts_with("tq_13_"))), na.rm = TRUE),
    tq_14_1 = rowSums(select(., all_of(starts_with("tq_14_"))), na.rm = TRUE)
    ) %>%
  unite(tq_15_3, all_of(starts_with("tq_15_")), remove = FALSE, na.rm = TRUE) %>%
  unite(tq_16_3, all_of(starts_with("tq_16_")), remove = FALSE, na.rm = TRUE) %>%
  unite(tq_17_3, all_of(starts_with("tq_17_")), remove = FALSE, na.rm = TRUE) %>%
  unite(tq_18_3, all_of(starts_with("tq_18_")), remove = FALSE, na.rm = TRUE) %>%
  mutate(tq_15_3 = na_if(tq_15_3, ""),
         tq_16_3 = na_if(tq_16_3, ""),
         tq_17_3 = na_if(tq_16_3, ""),
         tq_18_3 = na_if(tq_16_3, "")
         ) %>%
select(-survey_vars[19:length(survey_vars)])

variable_map <- variable_map %>%
  add_column(drop_consolidated = FALSE) %>%
  mutate(drop_consolidated = ifelse(
        variable %in% survey_vars[19:length(survey_vars)], 
        TRUE, 
        drop_consolidated)
      )
```

We purged containers that were no longer needed.

```{r}
rm(answer_pattern)
rm(step_num)
rm(num_vars)
rm(survey_vars)
rm(inst_prefix)
```



# Creating calculated variables

There were 381 variables dropped from the source data sets, with several of these variables appearing in more than one data set. The vast majority of these variables were calculated in SPSS, and we chose to recreate the calculations in R.

```{r}
drop_vars <- c(drop_v1, drop_v2, drop_v3, drop_v4, drop_v5)

length(drop_vars)
```

We added a column to our variable map to indicate if a variable was calculated.

```{r}
variable_map <- variable_map %>%
  add_column(calculated = FALSE)
```

## Administrative Section

We found 9 dropped calculated variables that referenced the administrative variables. We isolated these variables from Visit 1 to assess for labels and other attributes. `SUBJECT1`, `II_V1` and the `TEST_V` variables were previously found to be empty or superfluous values, and remained dropped.

```{r}
drop_vars[str_detect(drop_vars, "(Time_to)|(SUBJECT)|(TEST)|(II)")]

checking_cols <- v1 %>%
  select(all_of(drop_v1)) %>%
  select(all_of(contains("Time_to")), all_of(contains("SUBJECT")),
         all_of(contains("TEST"))
         )
```

We calculated the Time to Complete by subtracting the end time from the start time, and labeled the newly created variable.

```{r}
qds_all_visits <- qds_all_visits %>%
  mutate(time_to_complete = endtime - ctime)

attr(qds_all_visits$time_to_complete, 
     'label') <- "Time to complete (finish time - start time)"
```

We added this new variable to our variable map.

```{r}
map_temp_tibble <- tibble::tibble(
  'variable' = 'time_to_complete',
  'section' = 'Administrative',
  'sec_ord' = 1,
  'instrument' = 'Administrative',
  'inst_ord' = 1,
  'item_ord' = 10,
  'v1' = NA, 'v2' = NA, 'v3' = NA, 'v4' = NA, 'v5' = NA,
  drop_consolidated = NA,
  calculated = TRUE
)

variable_map <- rbind(variable_map, map_temp_tibble) %>%
  arrange(sec_ord, inst_ord, item_ord)

variable_map[variable_map$section == "Administrative",]
```

We added these resolved variables to our resolved list.

```{r}
resolved_vars <- drop_vars[str_detect(drop_vars, 
                                      "(Time_to)|(SUBJECT)|(TEST)|(II)")]

checking_vars <- setdiff(drop_vars, resolved_vars)
```

#### Group Assignment

Group assignment was not made until Visit 3, and was not recorded in the QDS data prior to this point. However, we would like for this value to be present on all of a subject's visits.

We consolidated the Master log's data regarding group assignment for each subject. We excluded any rows that were missing a value for ID, as well as any duplicate combinations of subject ID and group. Finally, we converted both columns to numeric. We verified that this data set now contained only one group assignment for each unique Subject ID, and that there were were no Subject ID values in the QDS data that were absent from the Master Log.

```{r}
master_log <- master_log %>%
  filter(!is.na(id)) %>%
  distinct() %>%
  mutate(across(everything(), as.numeric))

length(unique(master_log$id)) == nrow(master_log)
# TRUE

length(setdiff(qds_all_visits$subject, master_log$id)) == 0
# TRUE
```

The REDCap data contained three IDs that were text-based, used for testing: "-948_TEST", "TEST", and "test2". We excluded observations that were missing a subject ID, or had one of these testing values. We converted all columns to numeric. We checked to see if each subject ID was associated with only one group assignment (excluding visits without a recorded assignment), and discovered there were subject IDs with more than one group assignment. We verified that there were were no Subject ID values in the REDCap data that were absent from the Master Log.

```{r}
redcap <- redcap %>%
  filter(!(id %in% c('-948_TEST', 'TEST', 'test2'))
         ) %>%
  filter(!is.na(id)
         ) %>%
  mutate(across(everything(), as.numeric))

checking_cols <- redcap %>%
  select(id, group) %>%
  filter(!is.na(group)
         ) %>%
  distinct()

length(unique(checking_cols$id)) == nrow(checking_cols)
# FALSE

length(setdiff(redcap$id, master_log$id)) == 0
# TRUE
```

We found Subject IDs with more than one Group ID in the REDCap data, and subsequently checked their values against the Master Log. The following list is present to maintain a record:

2023-09-28:
* P2331: V5 grouping entered as 'UCM+SP' (2), V3 and V4 entered as 'L2C' (3)
                **'L2C' (3) in Master Log**
* P2398: V4 grouping entered as 'UCM+SP' (2), V3 and V5 entered as 'L2C' (3)
                **'L2C' (3) in Master Log**
* P2426: V5 grouping entered as 'UCM+SP' (2), V4 entered as 'L2C' (3)
                **'L2C' (3) in Master Log**

```{r}
check_ids <- unique(pull(redcap %>%
  group_by(id) %>%
  filter(length(unique(group)) > 1) %>%
  select(id)))

check_ids
# 2331 2398 2426

for (i in check_ids){
  print(i)
  for (row in nrow(redcap[redcap$id == i,])){
    visit_id <- redcap[redcap$id == i,]$visit
    group_id <- redcap[redcap$id == i,]$group
    print(paste0('V', visit_id, ': ', group_id))
    rm(visit_id)
    rm(group_id)
  }
  rm(row)
}
rm(i)
# 2331
# "V3: 3" "V4: 3" "V5: 2"
# 2398
# "V3: 3" "V4: 2" "V5: 3"
# 2426
# "V4: 3" "V5: 2"

for (i in check_ids) {
  m_log_g <- master_log[master_log$id == i,]$group
  print(paste(i, ":", m_log_g, sep = " "))
}

rm(i)
# "2331 : 3"
# "2398 : 3"
# "2426 : 3"
```

We corrected these Subject IDs manually, correcting the group assignment to the one most consistent with both the REDCap and Master Log data.

```{r}
redcap[redcap$id %in% check_ids, 'group'] <- 3
```

We ensured each subject in the REDCap data had the same group ID listed at all occurences. We verified each subject ID was associated with only one group assignment.

```{r}
redcap <- redcap %>%
  select(id, group) %>%
  group_by(id) %>%
  mutate(group = ifelse(n_distinct(group, na.rm = TRUE) == 1, 
                        unique(group[!is.na(group)]), 
                        group)
         ) %>%
  ungroup() %>%
  distinct()

length(unique(redcap$id)) == nrow(redcap)
# TRUE
```

We isolated the subject ID, visit number, and group assignment from the QDS data. We converted all columns to numeric. We checked to see if each subject ID was associated with only one group assignment (excluding visits without a recorded assignment), and discovered there were subject IDs with more than one group assignment. We verified that there were were no Subject ID values in the QDS data that were absent from the Master Log.

```{r}
qds_ids <- qds_all_visits %>%
  select(subject, visit, group) %>%
  rename_at('subject', ~'id') %>%
  mutate(across(everything(), as.numeric))

checking_cols <- qds_ids %>%
  select(id, group) %>%
  filter(!is.na(group)
         ) %>%
  distinct()

length(unique(checking_cols$id)) == nrow(checking_cols)
# FALSE

length(setdiff(qds_all_visits$subject, master_log$id)) == 0
# TRUE
```

We found Subject IDs with more than one Group ID in the QDS data, and subsequently checked their values against the Master Log and REDCap data. The following list is present to maintain a record:

2021-01-11: 
* P2023: V5 grouping entered incorrectly on QDS. Entered 'L2C' (3) instead of 'UCM+SP' (2) 
* P2136: V5 grouping entered incorrectly on QDS. Entered 'UCM+SP' (2) instead of 'L2C' (3)
* P2057: V3 grouping entered incorrectly on QDS. Entered 'UCM' (1) instead of 'L2C' (3) 

2023-09-28:
* P2057: continues to show previously noted erroneous entry in V3.
                **'L2C' (3) in Master Log, absent in REDCap**
* P2356: V3 grouping of 'SPCM'(3), V4 and V5 grouping of 'UCM+SP' (2)
                **'UCM+SP' (2) in Master Log, absent in REDCap**

```{r}
check_ids <- unique(pull(qds_ids %>%
  filter(!is.na(group)) %>%
  group_by(id) %>%
  filter(length(unique(group)) > 1) %>%
  select(id)))

check_ids
# 2057 2356

for (i in check_ids){
  print(i)
  for (row in nrow(qds_ids[qds_ids$id == i,])){
    visit_id <- qds_ids[qds_ids$id == i,]$visit
    group_id <- qds_ids[qds_ids$id == i,]$group
    print(paste0('V', visit_id, ': ', group_id))
    rm(visit_id)
    rm(group_id)
  }
  rm(row)
}
rm(i)
# 2057
# "V1: NA" "V2: NA" "V3: 1"  "V4: 3" 
# 2356
# "V1: NA" "V2: NA" "V3: 3"  "V4: 2"  "V5: 2" 

for (i in check_ids) {
  m_log_g <- master_log[master_log$id == i,]$group
  print(paste(i, ":", m_log_g, sep = " "))
  rm(m_log_g)
}

# "2507 : 3"
# "2356 : 2"

for (i in check_ids) {
  red_g <- redcap[redcap$id == i,]$group
  print(paste(i, ":", red_g, sep = " "))
  rm(red_g)
}
rm(i)
# "2507 : "
# "2356 : "
```

We corrected these Subject IDs manually, correcting the group assignment to the one most consistent with the QDS, REDCap, and Master Log data.

```{r}
qds_ids[qds_ids$id == 2057, 'group'] <- 3
qds_ids[qds_ids$id == 2356, 'group'] <- 2
```

We ensured each subject in the QDS data had the same group ID listed at all occurences. We verified each subject ID was associated with only one group assignment.

```{r}
qds_ids <- qds_ids %>%
  select(id, group) %>%
  group_by(id) %>%
  mutate(group = ifelse(n_distinct(group, na.rm = TRUE) == 1, 
                        unique(group[!is.na(group)]), 
                        group)
         ) %>%
  ungroup() %>%
  distinct()

length(unique(qds_all_visits$subject)) == nrow(qds_ids)
# TRUE
```

We combined the three data sets, and calculated if all group assignments present for a subject were consistent across the data sets. We verified that each subject was represented by a single row, that no subject IDs were either gained or lost in combining the sets, that any subject missing a group assignment in the Master Log was also missing a group assignment in both the REDCap and QDS data sets, and that any subject that had a group assignment in either the REDCap or QDS data sets also had a group assignment in the Master Log.

```{r}
group_ids <- full_join(
  master_log %>%
    rename_at('group', ~'m_group'), 
  redcap %>%
    rename_at('group', ~'r_group'),
  by = 'id'
) %>%
  full_join(
    qds_ids %>%
      rename_at('group', ~'q_group'),
    by = 'id'
    ) %>%
  arrange(id) %>%
  mutate(all_missing = ifelse(
       (is.na(m_group)&is.na(r_group)&is.na(q_group)),
       TRUE,
       FALSE)
    ) %>%
  mutate(
    m_r = case_when(
      (is.na(m_group)|is.na(r_group)) ~ TRUE,
      (!(is.na(m_group)|is.na(r_group)) & m_group == r_group) ~ TRUE,
      TRUE ~ FALSE
      ),
    m_q = case_when(
      (is.na(m_group)|is.na(q_group)) ~ TRUE,
      (!(is.na(m_group)|is.na(q_group)) & m_group == q_group) ~ TRUE,
      TRUE ~ FALSE
      ),
    r_q = case_when(
      (is.na(r_group)|is.na(q_group)) ~ TRUE,
      (!(is.na(r_group)|is.na(q_group)) & r_group == q_group) ~ TRUE,
      TRUE ~ FALSE
      )
    ) %>%
  mutate(all_equal = ifelse((m_r + m_q + r_q) == 3, TRUE, FALSE)
    ) %>%
  select(-c('m_r', 'm_q', 'r_q'))

length(unique(qds_ids$id)) == nrow(qds_ids)
# TRUE

length(setdiff(c(redcap$id, master_log$id, qds_ids$id), qds_ids$id)) == 0
# TRUE

length(setdiff(qds_ids$id, c(redcap$id, master_log$id, qds_ids$id))) == 0
# TRUE

length(setdiff(group_ids[is.na(group_ids$m_group),]$id, 
        group_ids[group_ids$all_missing, ]$id)) == 0
# TRUE
       
length(setdiff(group_ids[!is.na(group_ids$m_group),]$id, 
        group_ids[!group_ids$all_missing, ]$id)) == 0  
# TRUE
```

We found Subject IDs with inconsistent group assignments between the data sets, and subsequently checked their values. The following list is present to maintain a record:

2023-09-28:
* P2336: Grouping of 'L2C' (3) in Master Log and QDS, 'UCM+SP' (2) in REDCap
* P2349: Grouping of 'UCM+SP' (2) in Master Log and QDS, 'UCM' (1) in REDCap

```{r}
check_ids <- pull(unique(group_ids %>%
  filter(!all_equal) %>%
  select(id)))

check_ids
# 2335 2349

for (i in check_ids){
  print(paste0(i, ": Master (", group_ids[group_ids$id == i,]$m_group, ") QDS (",
              group_ids[group_ids$id == i,]$q_group, ") REDCap (", 
              group_ids[group_ids$id == i,]$r_group, ")"))
}
rm(i)
# "2336: Master (3) QDS (3) REDCap (2)"
# "2349: Master (2) QDS (2) REDCap (1)"
```

The Master Log assignments were thus considered to be complete and take prescedence over any other assignment. We isolated these values, and utilized them to update group assignments by subject ID for all occurences in the QDS data set.

```{r}
group_ids <- group_ids %>%
  select(id, m_group) %>%
  rename_at('m_group', ~'group') %>%
  rename_at('id', ~'subject')

qds_all_visits <- rows_update(qds_all_visits, group_ids, by="subject", 
                        unmatched = "ignore") %>%
  arrange(subject, visit)
```

We purged containers which were no longer necessary.

```{r}
rm(redcap)
rm(master_log)
rm(qds_ids)
rm(check_ids)
rm(checking_cols)
rm(group_ids)
```

## Screening Section

### Mini-Mental State Exam

We found 6 dropped calculated variables that referenced the Mini-Mental State Exam measures. We isolated these variables from Visit 1 to assess for labels and other attributes.

```{r}
checking_vars[str_detect(checking_vars, "(mms)|(MMS)")]

checking_cols <- v1 %>%
  select(all_of(drop_v1)) %>%
  select(all_of(contains("mms")), all_of(contains("MMS"))
         )
```

We calculated the scoring for the Mini-Mental Status exam. There were two possible versions - if subjects were unable to count backwards from 100 by 7s, they were offered the ability to spell WORLD backwards. This resulted in two potential scoring systems (one using `count` when numerically tested, and one using `num` when tested using WORLD). We calculated both of these possible scores.

```{r}
qds_all_visits <- qds_all_visits %>%
  mutate(num = ifelse(is.na(mms_4v) & !is.na(mms_4), 0, num)) %>%
  mutate(mms_s = (mms_1 + mms_2 + recal_1 + count + recal_2 + object + mms_7 +
           paper + mms_9 + mms_10 + mms_11),
    mms_s_alt = (mms_1 + mms_2 + recal_1 + num + recal_2 + object +
           mms_7 + paper + mms_9 + mms_10 + mms_11)
    )

attr(qds_all_visits$mms_s, 'label') <- 
  "MINI Mental State Exam Score when participant is able count backwards from 100 by 7s"

attr(qds_all_visits$mms_s_alt, 'label') <- 
  "MINI Mental State Exam Score when participant is unable to count backwards from 100 by 7s and are asked to spell WORLD backwards"
```

We determined which score should be dominant, based on if numeric or verbal testing was performed for item 4. We also created a variable which interpreted the results categorically.

```{r}
qds_all_visits <- qds_all_visits %>%
  mutate(mms_total = case_when(
      !is.na(num) & (num != 0) ~ mms_s_alt,
      (count > 0) & (num == 0 | is.na(num)) ~ mms_s,
      TRUE ~ NA),
    mms_severity = case_when(
      mms_total >= 24 ~ 0,
      (mms_total >=18) & (mms_total <24) ~ 1,
      (mms_total < 18) ~ 2,
      TRUE ~ NA
    )
  )

attr(qds_all_visits$mms_total, 
     'label') <- "MINI Mental State Exam total score"

attr(qds_all_visits$mms_severity, 
     'label') <- "What is the likelihood of cognitive impairment?"
attr(qds_all_visits$mms_severity, 'labels') <- c(
                                        "No cognitive impairment" = 0, 
                                        'Mild congnitive impairment' = 1,
                                        'Severe cognitive impairment' = 2)
```


We recalculated the variable map for this instrument, and updated our variable map with the desired order.

```{r}
map_temp_tibble <- tibble::tibble(
  'variable' = c('mms_s_alt', 'mms_total', 'mms_severity'),
  'section' = 'Screening',
  'sec_ord' = 2,
  'instrument' = 'Mini Mental State Exam',
  'inst_ord' = 2,
  'item_ord' = c(57, 58, 59),
  'v1' = NA, 'v2' = NA, 'v3' = NA, 'v4' = NA, 'v5' = NA,
  drop_consolidated = NA,
  calculated = TRUE
)

inst_map <- variable_map[variable_map$instrument == "Mini Mental State Exam",]

inst_map <- rbind(inst_map, map_temp_tibble) 

variable_map <- variable_map[variable_map$instrument != "Mini Mental State Exam",] %>%
  rbind(inst_map) %>%
  arrange(sec_ord, inst_ord, item_ord)

variable_map[variable_map$instrument == "Mini Mental State Exam",]
```

We added these resolved variables to our resolved list.

```{r}
resolved_vars <- c(resolved_vars, 
                   checking_vars[str_detect(checking_vars, "(mms)|(MMS)")])

checking_vars <- setdiff(drop_vars, resolved_vars)
```

### Anthropometric Variables

We found 28 dropped calculated variables that referenced the anthropometric measures. We isolated these variables from Visit 1 to assess for labels and other attributes.

```{r}
checking_vars[str_detect(checking_vars, 
                         "(height)|(weight)|(obese)|(bmi)|(BMI)")]

checking_cols <- v1 %>%
  select(all_of(drop_v1)) %>%
  select(all_of(contains("height")), all_of(contains("weight")),
         all_of(contains("bmi")), all_of(contains("obese")))
```

Calculation of BMI requires height in meters squared and weight in kilograms. Height was originally collected in centimeters. We calculated this into meters and meters squared, and labeled these new variables.

```{r}
qds_all_visits <- qds_all_visits %>%
  mutate(height_meters = height * 0.01,
         height_meters_sq = height_meters*height_meters)

attr(qds_all_visits$height_meters, 'label') <- "Height (meters)"
attr(qds_all_visits$height_meters_sq, 'label') <- "Height (meters squared)"
```

Weight was originally collected in pounds (lbs). We calculated this into kilograms, and labeled the new variable.

```{r}
qds_all_visits <- qds_all_visits %>%
  mutate(weight_kg = weight * 0.453592)

attr(qds_all_visits$weight_kg, 'label') <- "Weight (kilograms)"
```

We calculated BMI, and labeled the variable.

```{r}
qds_all_visits <- qds_all_visits %>%
  mutate(bmi = weight_kg / height_meters_sq)

attr(qds_all_visits$bmi, 'label') <- "BMI (kilograms/square meters)"
```

We recreated the categorization of subject weight by BMI, into "underweight", "normal", "overweight" and "obese. We also created binary flag variables indicating if a subject was or was not classified as obese, or was classified either obese or overweight.

```{r}
qds_all_visits <- qds_all_visits %>%
  mutate(weight_status = case_when(
      !is.na(bmi) & bmi < 18.5 ~ 0,
      !is.na(bmi) & (bmi >=18.5) & (bmi < 25) ~ 1,
      !is.na(bmi) & (bmi >=25) & (bmi < 30) ~ 2,
      !is.na(bmi) & bmi >=30 ~ 3,
      is.na(bmi) ~ NA
      )
    )

attr(qds_all_visits$weight_status, 'label') <- "BMI categorization"

attr(qds_all_visits$weight_status, 'labels') <- c(
      "underweight" = 0, 
      "normal" = 1,
      "overweight" = 2,
      "obese" = 3
    )

qds_all_visits <- qds_all_visits %>%
    mutate(obese = case_when(
      is.na(weight_status) ~ NA,
      weight_status == 3 ~ TRUE,
      !is.na(weight_status) & (weight_status != 3) ~ FALSE
    )
  )

attr(qds_all_visits$obese, 'label') <- "Obese"
attr(qds_all_visits$obese, 'labels') <- c("obese" = TRUE, 
                                          'not obese' = FALSE)

qds_all_visits <- qds_all_visits %>%
    mutate(overweight_obese = case_when(
      is.na(weight_status) ~ NA,
      (weight_status == 2) | (weight_status == 3) ~ TRUE,
      !is.na(weight_status) | (weight_status < 2) ~ FALSE
    )
  )

attr(qds_all_visits$overweight_obese, 'label') <- "Overweight or Obese"
attr(qds_all_visits$overweight_obese, 'labels') <- c(
                                        "overweight or obese" = TRUE, 
                                        'neither overweight nor obese' = FALSE)
```

We recalculated the variable map for this instrument, and updated our variable map with the desired order.

```{r}
map_temp_tibble <- tibble::tibble(
  'variable' = c('weight_kg', 'height_meters', 'height_meters_sq', 'bmi', 
              'weight_status', 'obese', 'overweight_obese'),
  'section' = 'Screening',
  'sec_ord' = 2,
  'instrument' = 'Anthropometrics',
  'inst_ord' = 4,
  'item_ord' = c(2, 4, 5, 6, 7, 8, 9 ),
  'v1' = NA, 'v2' = NA, 'v3' = NA, 'v4' = NA, 'v5' = NA,
  drop_consolidated = NA,
  calculated = TRUE
)

inst_map <- variable_map[variable_map$instrument == "Anthropometrics",] %>%
  mutate(item_ord = item_ord + 7) %>%
  mutate(item_ord = case_when(
    variable == "weight" ~ 1,
    variable == "height" ~ 3,
    TRUE ~ item_ord
  ))

inst_map <- rbind(inst_map, map_temp_tibble) 

variable_map <- variable_map[variable_map$instrument != "Anthropometrics",] %>%
  rbind(inst_map) %>%
  arrange(sec_ord, inst_ord, item_ord)

variable_map[variable_map$instrument == "Anthropometrics",]
```


We added these resolved variables to our resolved list.

```{r}
resolved_vars <- c(resolved_vars, 
                   checking_vars[str_detect(checking_vars, 
                         "(height)|(weight)|(obese)|(bmi)|(BMI)")])

checking_vars <- setdiff(drop_vars, resolved_vars)
```

## Demographic Section

### Demographic Questionnaire

There was a single variable dropped from the SPSS calculations in the demographic questionnaire - `Any_health_insurance`

```{r}
checking_vars[str_detect(checking_vars, "(insurance)|(dem)")]

checking_cols <- v1 %>%
  select(all_of(drop_v1)) %>%
  select(all_of(contains("insurance")))
```

We calculated if a subject had any form of health insurance by responses to the itemized dummy variables for question 7 - if the subject indicated any form of insurance, the value would be "TRUE", if no insurance was selected or a lack of insurance indicated, "FALSE". 

```{r}
qds_all_visits <- qds_all_visits %>%
  mutate(any_health_insurance = case_when(
      (dem_7a == 1) | (dem_7b == 1) | (dem_7c == 1) | (dem_7d == 1) ~ TRUE,
      (dem_7a == 0) | (dem_7b == 0) | (dem_7c == 0) | (dem_7d == 0) ~ FALSE,
      (dem_7e == 1) ~ FALSE,
      TRUE ~ NA
      )
    )

attr(qds_all_visits$any_health_insurance, 
     'label') <- "Does the participant have health insurance?"
attr(qds_all_visits$any_health_insurance, 'labels') <- c(
                                        "some form of insurance" = TRUE, 
                                        "no insurance" = FALSE)
```

We recalculated the variable map for this instrument, and updated our variable map with the desired order.

```{r}
map_temp_tibble <- tibble::tibble(
  'variable' = c('any_health_insurance'),
  'section' = 'Demographics',
  'sec_ord' = 3,
  'instrument' = 'Demographic Questionnaire',
  'inst_ord' = 1,
  'item_ord' = 22,
  'v1' = NA, 'v2' = NA, 'v3' = NA, 'v4' = NA, 'v5' = NA,
  drop_consolidated = NA,
  calculated = TRUE
)

inst_map <- variable_map[variable_map$instrument == "Demographic Questionnaire",] %>%
  mutate(item_ord = ifelse(item_ord >=22, item_ord + 1, item_ord))

inst_map <- rbind(inst_map, map_temp_tibble) 

variable_map <- variable_map[variable_map$instrument != 
                               "Demographic Questionnaire",] %>%
  rbind(inst_map) %>%
  arrange(sec_ord, inst_ord, item_ord)

variable_map[variable_map$instrument == "Demographic Questionnaire",]
```

We added these resolved variables to our resolved list.

```{r}
resolved_vars <- c(resolved_vars, 
                   checking_vars[str_detect(checking_vars, "(insurance)|(dem)")])

checking_vars <- setdiff(drop_vars, resolved_vars)
```

### The Brief Homelessness Questionnaire

There was a single variable dropped from the SPSS calculations in The Brief Homelessness Questionnaire - `current_months_homeless`

```{r}
checking_vars[str_detect(checking_vars, "(home)|(HOME)")]

checking_cols <- v1 %>%
  select(all_of(drop_v1)) %>%
  select(all_of(contains("homeless")))
```

This variable was a recode from Item 4 of the questionnaire, and thus the calculated variable would be a duplicate. It was not re-added.

```{r}
resolved_vars <- c(resolved_vars, 
                   checking_vars[str_detect(checking_vars, "(home)|(HOME)")])

checking_vars <- setdiff(drop_vars, resolved_vars)
```

## Health Section

### PHQ

We found 48 dropped calculated variables that referenced the Patient Health Questionnaire measures. We isolated these variables from Visit 1 to assess for labels and other attributes.

```{r}
checking_vars[str_detect(checking_vars, "(phq)|(PHQ)")]

checking_cols <- v1 %>%
  select(all_of(drop_v1)) %>%
  select(all_of(contains("PHQ")))
```

We calculated the total for the PHQ Depression items (Questions 1-8).

```{r}
qds_all_visits <- qds_all_visits %>%
  mutate(phq_dep_total = (phq_1 + phq_2 + phq_3 + phq_4 + phq_5 + phq_6 + 
                            phq_7 + phq_8))

attr(qds_all_visits$phq_dep_total, 
     'label') <- "Sum of PHQ MDD questions"
```

We created dichotomous versions of each of the PHQ Depression items (Questions 1-8): a score of 0-1 ("not at all" or "several days") was coded as a 0, and any other answer as a 1. We calculated the total number of items where "More than half the days" or "Nearly every day" were selected. 

```{r}
qds_all_visits <- qds_all_visits %>%
  mutate(phq_1_dichot = case_when(
    (phq_1 == 0) | (phq_1 == 1) ~ 0,
    phq_1 > 1 ~ 1,
    TRUE ~ NA
    ),
    phq_2_dichot = case_when(
    (phq_2 == 0) | (phq_2 == 1) ~ 0,
    phq_2 > 1 ~ 1,
    TRUE ~ NA
    ),
    phq_3_dichot = case_when(
    (phq_3 == 0) | (phq_3 == 1) ~ 0,
    phq_3 > 1 ~ 1,
    TRUE ~ NA
    ),
    phq_3_dichot = case_when(
    (phq_3 == 0) | (phq_3 == 1) ~ 0,
    phq_3 > 1 ~ 1,
    TRUE ~ NA
    ),
    phq_4_dichot = case_when(
    (phq_4 == 0) | (phq_4 == 1) ~ 0,
    phq_4 > 1 ~ 1,
    TRUE ~ NA
    ),
    phq_5_dichot = case_when(
    (phq_5 == 0) | (phq_5 == 1) ~ 0,
    phq_5 > 1 ~ 1,
    TRUE ~ NA
    ),
    phq_6_dichot = case_when(
    (phq_6 == 0) | (phq_6 == 1) ~ 0,
    phq_6 > 1 ~ 1,
    TRUE ~ NA
    ),
    phq_7_dichot = case_when(
    (phq_7 == 0) | (phq_7 == 1) ~ 0,
    phq_7 > 1 ~ 1,
    TRUE ~ NA
    ),
    phq_8_dichot = case_when(
    (phq_8 == 0) | (phq_8 == 1) ~ 0,
    phq_8 > 1 ~ 1,
    TRUE ~ NA
    ),
    phq_dep_dichot_total = (phq_1_dichot + phq_2_dichot + phq_3_dichot +
                              phq_4_dichot + phq_5_dichot + phq_6_dichot + 
                              phq_7_dichot + phq_8_dichot)
  )

attr(qds_all_visits$phq_1_dichot, 
     'label') <- "Little interest or pleasure in doing things dichot"
attr(qds_all_visits$phq_2_dichot, 
     'label') <- "Feeling down, depressed, or hopeless dichot"
attr(qds_all_visits$phq_3_dichot, 
     'label') <- "Trouble falling or staying asleep, or sleeping too much dichot"
attr(qds_all_visits$phq_4_dichot, 
     'label') <- "Feeling tired or having little energy dichot"
attr(qds_all_visits$phq_5_dichot, 
     'label') <- "Poor appetite or overeating dichot"
attr(qds_all_visits$phq_6_dichot, 
     'label') <- "Failure or have let yourself or your family down dichot"
attr(qds_all_visits$phq_7_dichot, 
     'label') <- "Reading the newspaper or watching television dichot"
attr(qds_all_visits$phq_8_dichot, 
     'label') <- "Fidgety or restless dichot"

for (i in c(1:8)){
  attr(qds_all_visits[[paste0("phq_",i,"_dichot")]], 'labels') <- c(
                            "Not at all and several days" = 0, 
                            "More than half the days and nearly every day" = 1)
  
}

attr(qds_all_visits$phq_dep_dichot_total, 
     'label') <- "PHQ depression dichotomized total"

```

We determined the categorical score of probable MDD.

```{r}
qds_all_visits <- qds_all_visits %>%
  mutate(phq_dep_symp = case_when(
             ((phq_1_dichot == 1) | (phq_2_dichot == 1)) ~ 1,
             ((phq_1_dichot == 0) & (phq_2_dichot == 0)) ~ 0,
           TRUE ~ NA
           ),
         phq_mdd = case_when(
           ((phq_dep_symp == 1) | (phq_dep_dichot_total > 4)) ~ 1,
           phq_dep_symp == 0 ~ 0,
           phq_dep_dichot_total < 5 ~ 0,
           TRUE ~ 0
           )
         ) 


attr(qds_all_visits$phq_dep_symp, 
     'label') <- "Does PHQ1 or PHQ2 have more than half the days and nearly every day selected?"
attr(qds_all_visits$phq_mdd, 
     'label') <- "Is there probable major depressive disorder?"

for (i in c('phq_dep_symp', 'phq_mdd')){
  attr(qds_all_visits[[i]], 'labels') <- c(
                            "No" = 0, 
                            "Yes" = 1)
}

```

We calculated the total for the PHQ GAD items (Questions 9-15).

```{r}
qds_all_visits <- qds_all_visits %>%
  mutate(phq_gad_total = (phq_9 + phq_10 + phq_11 + phq_12 + phq_13 + 
                            phq_14 + phq_15))

attr(qds_all_visits$phq_gad_total, 
     'label') <- "Sum of PHQ GAD questions"
```


We recalculated the variable map for this instrument, and updated our variable map with the desired order.

```{r}
new_vars <- c('phq_dep_total')

for (i in c(1:8)){
  new_vars <- c(new_vars, paste0("phq_",i,"_dichot"))
}

new_vars <- c(new_vars, 'phq_dep_dichot_total', 'phq_dep_symp', 'phq_mdd',
              'phq_gad_total')

map_temp_tibble <- tibble::tibble(
  'variable' = new_vars,
  'section' = 'Health',
  'sec_ord' = 4,
  'instrument' = 'Patient Health Questionnaire',
  'inst_ord' = 1,
  'item_ord' = c(17, 2, 4, 6, 8, 10, 12, 14, 16, 18, 19, 20, 28),
  'v1' = NA, 'v2' = NA, 'v3' = NA, 'v4' = NA, 'v5' = NA,
  drop_consolidated = NA,
  calculated = TRUE
)

inst_map <- variable_map[variable_map$instrument == 
               "Patient Health Questionnaire",] %>%
    mutate(item_ord = case_when(
      (item_ord < 9) ~ (item_ord * 2) - 1,
      (item_ord >= 9) ~ (item_ord + 12)
      )
    ) 

inst_map <- rbind(inst_map, map_temp_tibble)

variable_map <- variable_map[variable_map$instrument != 
                               "Patient Health Questionnaire",] %>%
  rbind(inst_map) %>%
  arrange(sec_ord, inst_ord, item_ord)

variable_map[variable_map$instrument == "Patient Health Questionnaire",]
```

We added these resolved variables to our resolved list.

```{r}
resolved_vars <- c(resolved_vars, 
                   checking_vars[str_detect(checking_vars, "(phq)|(PHQ)")])

checking_vars <- setdiff(drop_vars, resolved_vars)
```

### SF 12 Health Survey

We found 4 dropped calculated variables that referenced the SF 12 Health Survey measures. We isolated these variables from Visit 1 to assess for labels and other attributes.

```{r}
checking_vars[str_detect(checking_vars, "(^hs)|(^HS)")]

checking_cols <- v1 %>%
  select(all_of(drop_v1)) %>%
  select(all_of(starts_with("hs")))
```

We dichotomized the outcomes for the first question of the instrument.

```{r}
qds_all_visits <- qds_all_visits %>%
  mutate(hs_1_dichot = case_when(
      hs_1 <= 3 ~ 0,
      hs_1 > 3 ~ 1,
      TRUE ~ NA
    )
  )

attr(qds_all_visits$hs_1_dichot, 'label') <- "Self-Rated health dichot"
attr(qds_all_visits$hs_1_dichot, 'labels') <- c(
                                            "excelent to good health" = 0, 
                                            "fair or poor health" = 1)
```

We recalculated the variable map for this instrument, and updated our variable map with the desired order.

```{r}
map_temp_tibble <- tibble::tibble(
  'variable' = c('hs_1_dichot'),
  'section' = 'Health',
  'sec_ord' = 4,
  'instrument' = 'SF 12 Health Survey',
  'inst_ord' = 2,
  'item_ord' = c(2),
  'v1' = NA, 'v2' = NA, 'v3' = NA, 'v4' = NA, 'v5' = NA,
  drop_consolidated = NA,
  calculated = TRUE
)

inst_map <- variable_map[variable_map$instrument == "SF 12 Health Survey",] %>%
  mutate(item_ord = ifelse (item_ord > 1, item_ord + 1, item_ord))

inst_map <- rbind(inst_map, map_temp_tibble)

variable_map <- variable_map[variable_map$instrument !=  "SF 12 Health Survey",] %>%
  rbind(inst_map) %>%
  arrange(sec_ord, inst_ord, item_ord)

variable_map[variable_map$instrument == "SF 12 Health Survey",]
```

We added these resolved variables to our resolved list.

```{r}
resolved_vars <- c(resolved_vars, 
                   checking_vars[str_detect(checking_vars, "(^hs)|(^HS)")])

checking_vars <- setdiff(drop_vars, resolved_vars)
```

### Self-Rated Health

We found 4 dropped calculated variables that referenced the Self-Rated Health measures. We isolated these variables from Visit 1 to assess for labels and other attributes.

```{r}
checking_vars[str_detect(checking_vars,
             "((Mental_)|(mental_)|(pain)|(PAIN)|(Substance_)|(substance_))")]

checking_cols <- v1 %>%
  select(all_of(drop_v1)) %>%
  select(all_of(contains("pain")), all_of(starts_with("s_")), 
         all_of(contains("substance_")), all_of(contains("mental")))
```

We dichotomized our items for mental health history, substance abuse history, and pain.

```{r}
qds_all_visits <- qds_all_visits %>%
  mutate(
    s_mental_hx = case_when(
      ((s_19 == 1) | (s_20 == 1) | (s_21 == 1) | (s_22 == 1) | (s_23 == 1)) ~ 1,
      ((s_19 == 0) & (s_20 == 0) & (s_21 == 0) & (s_22 == 0) & (s_23 == 0)) ~ 0,
      TRUE ~ NA
     ),
    s_30_dichot = case_when(
      ((s_30a == 1) | (s_30b == 1) | (s_30c == 1) | (s_30d == 1) | 
        (s_30e == 1) | (s_30f == 1) | (s_30g == 1)) ~ 1,
      ((s_30a == 0) & (s_30b == 0) & (s_30c == 0) & (s_30d == 0) | 
        (s_30e == 0) & (s_30f == 0) & (s_30g == 0)) ~ 0,
      s_29 == 0 ~ 0,
      TRUE ~ NA
    ),
    s_32_dichot = case_when(
      ((s_32b == 1) | (s_32c == 1) | (s_32d == 1) | (s_32e == 1) | 
        (s_32f == 1) | (s_32g == 1) | (s_32h == 1)) ~ 1,
      ((s_32b == 0) & (s_32c == 0) & (s_32d == 0) & (s_32e == 0) & 
        (s_32f == 0) & (s_32g == 0) & (s_32h == 0)) ~ 0,
      TRUE ~ NA
    ),
    s_40_dichot = case_when(
        s_40 > 2 ~ 1,
        s_40 <=2 ~ 0,
        TRUE ~ NA
      )
  )

attr(qds_all_visits$s_mental_hx, 'label') <- 
  "If history of depression, anxiety, ptsd, bipolar, or schizo present"
attr(qds_all_visits$s_mental_hx, 
     'labels') <- c("has no history of mental illnes" = 0,
                    "has a history of at least one mental illness" = 1)
attr(qds_all_visits$s_30_dichot, 'label') <- 
  "If history of alcohol, cannabis, cocaine, opiate, amphetamine, sedative, hypnotic, anxiolytic or other abuse present"
attr(qds_all_visits$s_30_dichot, 
     'labels') <- c("has no history of substance abuse" = 0,
                    "has a history of at least one substance abuse disorder" = 1)
attr(qds_all_visits$s_32_dichot, 'label') <- 
  "If used cannabis, cocaine, opiate, amphetamine, sedative, hypnotic, anxiolytic, K2, or other substance"
attr(qds_all_visits$s_32_dichot, 
     'labels') <- c("has not used cannabis, cocaine, opiate, amphetamine, sedative, hypnotic, anxiolytic, K2, or other substance " = 0,
                    "has used cannabis, cocaine, opiate, amphetamine, sedative, hypnotic, anxiolytic, K2, or other substance " = 1)
attr(qds_all_visits$s_40_dichot, 'label') <- 
  "Pain level in last 4 weeks categorized into none-mild and mod-severe"
attr(qds_all_visits$s_40_dichot, 
     'labels') <- c("none to mild pain" = 0,
                    "moderate or severe pain" = 1)
```

We recalculated the variable map for this instrument, and updated our variable map with the desired order.

```{r}
map_temp_tibble <- tibble::tibble(
  'variable' = c('s_mental_hx', 's_30_dichot', 's_32_dichot', 's_40_dichot'),
  'section' = 'Health',
  'sec_ord' = 4,
  'instrument' = 'Self-Rated Health',
  'inst_ord' = 4,
  'item_ord' = c(93, 157, 169, 179),
  'v1' = NA, 'v2' = NA, 'v3' = NA, 'v4' = NA, 'v5' = NA,
  drop_consolidated = NA,
  calculated = TRUE
)

inst_map <- variable_map[variable_map$instrument == "Self-Rated Health",] %>%
  mutate(item_ord = case_when(
    item_ord < 93 ~ item_ord,
    item_ord >= 176 ~ item_ord + 4,
    (item_ord >= 167) & (item_ord < 176) ~ item_ord + 3,
    (item_ord >= 156) & (item_ord < 167) ~ item_ord + 2,
    (item_ord >= 93) & (item_ord < 156) ~ item_ord + 1
  ))

inst_map <- rbind(inst_map, map_temp_tibble)

variable_map <- variable_map[variable_map$instrument !=  "Self-Rated Health",] %>%
  rbind(inst_map) %>%
  arrange(sec_ord, inst_ord, item_ord)

variable_map[variable_map$instrument == "Self-Rated Health",]
```

We added these resolved variables to our resolved list.

```{r}
resolved_vars <- c(resolved_vars, 
                   checking_vars[str_detect(checking_vars,
             "((Mental_)|(mental_)|(pain)|(PAIN)|(Substance_)|(substance_))")])

checking_vars <- setdiff(drop_vars, resolved_vars)
```

### TCU Drug Screen 5

We found 8 dropped calculated variables that referenced the TCU Drug Screen 5 measures. We isolated these variables from Visit 2 to assess for labels and other attributes.

```{r}
checking_vars[str_detect(checking_vars, "((DS)|(ds))")]

checking_cols <- v2 %>%
  select(all_of(drop_v2)) %>%
  select(all_of(contains("ds")))
```

We calculated the total of the items, and categorized the result.

```{r}
qds_all_visits <- qds_all_visits %>%
  mutate(ds_10_val = case_when(
          ((ds_10a == 1) | (ds_10b == 1)) ~ 1,
          ((ds_10a == 0) & (ds_10b == 0)) ~ 0,
          TRUE ~ NA
        ),
        ds_11_val = case_when(
          ((ds_11a == 1) | (ds_11b == 1)) ~ 1,
          ((ds_11a == 0) & (ds_11b == 0)) ~ 0,
          TRUE ~ NA
        ),
        ds_total = ((ds_1 + ds_2 + ds_3 + ds_4 + ds_5 + ds_6 + ds_7 + ds_8 +
                       ds_9 + ds_10_val + ds_11_val)),
        ds_cat = case_when(
          (ds_total <= 1) ~ 0,
          ((ds_total >= 2) & (ds_total <= 3)) ~ 1,
          ((ds_total >=4) & (ds_total <= 5)) ~ 2,
          (ds_total >5) ~ 3,
          TRUE ~ NA
        )
      )

attr(qds_all_visits$ds_10_val, 
     'label') <- "Combined 10A & 10B, tolerance"
attr(qds_all_visits$ds_11_val, 
     'label') <- "Combined 11A & 11B, withdrawal"
attr(qds_all_visits$ds_total, 
     'label') <- "Total TCU Drug Screen 5 Score"
attr(qds_all_visits$ds_cat, 
     'label') <- "Total TCU Drug Screen 5 Score Category"
attr(qds_all_visits$ds_10_val, 
     'labels') <- c("No to both" = 0, 
                    "Yes to either" = 1)
attr(qds_all_visits$ds_11_val, 
     'labels') <- c("No to both" = 0, 
                    "Yes to either" = 1)
attr(qds_all_visits$ds_cat, 
     'labels') <- c("Score <= 1" = 0, 
                    "Mild disorder" = 1,
                    "Moderate disorder" = 2,
                    "Severe disorder" = 3)
```

We recalculated the variable map for this instrument, and updated our variable map with the desired order.

```{r}
map_temp_tibble <- tibble::tibble(
  'variable' = c('ds_10_val', 'ds_11_val', 'ds_total', 'ds_cat'),
  'section' = 'Health',
  'sec_ord' = 4,
  'instrument' = 'TCU Drug Screen 5',
  'inst_ord' = 5,
  'item_ord' = c(12, 15, 16, 17),
  'v1' = NA, 'v2' = NA, 'v3' = NA, 'v4' = NA, 'v5' = NA,
  drop_consolidated = NA,
  calculated = TRUE
)

inst_map <- variable_map[variable_map$instrument == 
               "TCU Drug Screen 5",] %>%
  mutate(item_ord = case_when(
    (item_ord <= 11) ~ item_ord,
    ((item_ord > 11)) ~ item_ord + 1
  ))

inst_map <- rbind(inst_map, map_temp_tibble)

variable_map <- variable_map[variable_map$instrument != 
                               "TCU Drug Screen 5",] %>%
  rbind(inst_map) %>%
  arrange(sec_ord, inst_ord, item_ord)

variable_map[variable_map$instrument == "TCU Drug Screen 5",]
```

We added these resolved variables to our resolved list.

```{r}
resolved_vars <- c(resolved_vars, 
                   checking_vars[str_detect(checking_vars, "((DS)|(ds))")])

checking_vars <- setdiff(drop_vars, resolved_vars)
```

### Primary Care PTSD Screen (PC-PTSD)

We found 2 dropped calculated variables that referenced the Primary Care PTSD Screen (PC-PTSD) measures. We isolated these variables from Visit 1 to assess for labels and other attributes.

```{r}
checking_vars[str_detect(checking_vars, "(ptsd)|(PTSD)")]

checking_cols <- v1 %>%
  select(all_of(drop_v1)) %>%
  select(all_of(contains("PTSD")))
```

We calculated the total of the items, and categorized the result.

```{r}
qds_all_visits <- qds_all_visits %>%
  mutate(ptsd_total = (ptsd_1 + ptsd_2 + ptsd_3 + ptsd_4),
         ptsd_positive = case_when(
           ptsd_total >= 3 ~ 1,
           ptsd_total < 3 ~ 0,
           TRUE ~ NA
           )
         )

attr(qds_all_visits$ptsd_total, 
     'label') <- "Sum of PC-PTSD"
attr(qds_all_visits$ptsd_positive, 
     'label') <- "Probable PTSD"
attr(qds_all_visits$ptsd_positive, 
     'labels') <- c("No PTSD" = 0, 
                    "Probable PTSD" = 1)
```

We recalculated the variable map for this instrument, and updated our variable map with the desired order.

```{r}
map_temp_tibble <- tibble::tibble(
  'variable' = c('ptsd_total', 'ptsd_positive'),
  'section' = 'Health',
  'sec_ord' = 4,
  'instrument' = 'Primary Care PTSD Screen (PC-PTSD)',
  'inst_ord' = 6,
  'item_ord' = c(5,6),
  'v1' = NA, 'v2' = NA, 'v3' = NA, 'v4' = NA, 'v5' = NA,
  drop_consolidated = NA,
  calculated = TRUE
)

inst_map <- variable_map[variable_map$instrument == 
               "Primary Care PTSD Screen (PC-PTSD)",]

inst_map <- rbind(inst_map, map_temp_tibble)

variable_map <- variable_map[variable_map$instrument != 
                               "Primary Care PTSD Screen (PC-PTSD)",] %>%
  rbind(inst_map) %>%
  arrange(sec_ord, inst_ord, item_ord)

variable_map[variable_map$instrument == "Primary Care PTSD Screen (PC-PTSD)",]
```

We added these resolved variables to our resolved list.

```{r}
resolved_vars <- c(resolved_vars, 
                   checking_vars[str_detect(checking_vars, "(ptsd)|(PTSD)")])

checking_vars <- setdiff(drop_vars, resolved_vars)
```

### Tobacco History

We found 8 dropped calculated variables that referenced the Tobacco History. We isolated these variables from Visit 1 to assess for labels and other attributes.

```{r}
checking_vars[str_detect(checking_vars, "((^t[0-9])|(^T[0-9])|(smoke))")]

checking_cols <- v1 %>%
  select(all_of(drop_v1)) %>%
  select(all_of(starts_with("t")), all_of(contains("smoke")))
```

We calculated the values of Questions 5 and 6. We also calculated the ratio of friends that smoke, and created a dichotomous if a spouse smokes.

```{r}
qds_all_visits <- qds_all_visits %>%
  mutate(t_5_val = case_when(
    (t_5 == 0) ~ 0,
    (t_5 == 1) ~ t_5a1,
    (t_5 == 2) ~ t_5a2,
    (t_5 == 3) ~ t_5a3,
    (t_5 == 4) ~ t_5a4,
    (t_5 == 5) ~ t_5a5,
    (t_5 == 6) ~ t_5a6,
    TRUE ~ NA
  ),
  t_6_val = case_when(
    (t_6 == 0) ~ 0,
    (t_6 == 1) ~ t_6a1,
    (t_6 == 2) ~ t_6a2,
    (t_6 == 3) ~ t_6a3,
    (t_6 == 4) ~ t_6a4,
    (t_6 == 5) ~ t_6a5,
    (t_6 == 6) ~ t_6a6,
    TRUE ~ NA
  ),
  t_spouse = case_when(
    ((t_34 == 1) & (t_35 == 1)) ~ 1,
    ((t_34 == 1) & (t_35) == 1) ~ 0,
    TRUE ~ NA
  ),
  t_friends = case_when(
    (t_38 > 0) ~ (t_39 / t_38),
    TRUE ~ NA
  )
         )

attr(qds_all_visits$t_5_val, 
     'label') <- "Exact number of cigarettes smoked in the last 24 hours"
attr(qds_all_visits$t_6_val, 
     'label') <- "Exact number of cigarettes usually smoked in a day"
attr(qds_all_visits$t_spouse, 
     'label') <- "if a participant has a spouse that smokes"
attr(qds_all_visits$t_spouse, 
     'labels') <- c("participant does not have spouse who smokes" = 0, 
                    "participant does have spouse who smokes" = 1)
attr(qds_all_visits$t_friends, 
     'label') <- "Ratio of close friends who smoke"
```

We recalculated the variable map for this instrument, and updated our variable map with the desired order.

```{r}
map_temp_tibble <- tibble::tibble(
  'variable' = c('t_5_val', 't_6_val', 't_spouse', 't_friends'),
  'section' = 'Health',
  'sec_ord' = 4,
  'instrument' = 'Tobacco History',
  'inst_ord' = 8,
  'item_ord' = c(15, 23, 102, 107),
  'v1' = NA, 'v2' = NA, 'v3' = NA, 'v4' = NA, 'v5' = NA,
  drop_consolidated = NA,
  calculated = TRUE
)

inst_map <- variable_map[variable_map$instrument ==  "Tobacco History",] %>%
  mutate(item_ord = case_when(
    item_ord < 15 ~ item_ord,
    item_ord >= 104 ~ item_ord + 4,
    (item_ord < 104) & (item_ord >= 100) ~ item_ord + 3,
    (item_ord >= 22) & (item_ord < 100) ~ item_ord + 2,
    (item_ord < 22) & (item_ord >= 15) ~ item_ord + 1
  ))

inst_map <- rbind(inst_map, map_temp_tibble)

variable_map <- variable_map[variable_map$instrument != "Tobacco History",] %>%
  rbind(inst_map) %>%
  arrange(sec_ord, inst_ord, item_ord)

variable_map[variable_map$instrument == "Tobacco History",]
```

We added these resolved variables to our resolved list.

```{r}
resolved_vars <- c(resolved_vars, checking_vars[str_detect(checking_vars,
                                  "((^t[0-9])|(^T[0-9])|(smoke))")])

checking_vars <- setdiff(drop_vars, resolved_vars)
```


### Heaviness of Smoking Index (HSI)

We found 8 dropped calculated variables that referenced the Heaviness of Smoking Index (HSI) measures. We isolated these variables from Visit 1 to assess for labels and other attributes.

```{r}
checking_vars[str_detect(checking_vars, "(hsi)|(HSI)")]

checking_cols <- v1 %>%
  select(all_of(drop_v1)) %>%
  select(all_of(contains("hsi")))
```

We calculated the total of the items, and categorized the result.

```{r}
qds_all_visits <- qds_all_visits %>%
  mutate(hsi_score = (hsi_1 + hsi_2),
         hsi_cat = case_when(
           hsi_score < 3 ~ 0,
           hsi_score == 3 ~ 1,
           hsi_score == 4 ~ 2,
           hsi_score > 4 ~ 3,
           TRUE ~ NA
           )
         )

attr(qds_all_visits$hsi_score, 
     'label') <- "HSI score"
attr(qds_all_visits$hsi_cat, 
     'label') <- "HSI score recoded into categories"
attr(qds_all_visits$hsi_cat, 
     'labels') <- c("very low dependence" = 0, 
                    "low to moderate dependence" = 1,
                    "moderate dependence" = 2,
                    "high dependence" = 3)
```

We recalculated the variable map for this instrument, and updated our variable map with the desired order.

```{r}
map_temp_tibble <- tibble::tibble(
  'variable' = c('hsi_score', 'hsi_cat'),
  'section' = 'Health',
  'sec_ord' = 4,
  'instrument' = 'Heaviness of Smoking Index (HSI)',
  'inst_ord' = 9,
  'item_ord' = c(3,4),
  'v1' = NA, 'v2' = NA, 'v3' = NA, 'v4' = NA, 'v5' = NA,
  drop_consolidated = NA,
  calculated = TRUE
)

inst_map <- variable_map[variable_map$instrument == 
               "Heaviness of Smoking Index (HSI)",]

inst_map <- rbind(inst_map, map_temp_tibble)

variable_map <- variable_map[variable_map$instrument != 
                               "Heaviness of Smoking Index (HSI)",] %>%
  rbind(inst_map) %>%
  arrange(sec_ord, inst_ord, item_ord)

variable_map[variable_map$instrument == "Heaviness of Smoking Index (HSI)",]
```

We added these resolved variables to our resolved list.

```{r}
resolved_vars <- c(resolved_vars, 
                   checking_vars[str_detect(checking_vars, "(hsi)|(HSI)")])

checking_vars <- setdiff(drop_vars, resolved_vars)
```

### BRFSS Inadequate Sleep

We found 8 dropped calculated variables that referenced the BRFSS Inadequate Sleep measures. We isolated these variables from Visit 1 to assess for labels and other attributes.

```{r}
checking_vars[str_detect(checking_vars, 
                         "((brs)|(BRS)|(bris)|(BRIS)|(qd)|(QD)|(unintent_slp))")]

checking_cols <- v1 %>%
  select(all_of(drop_v1)) %>%
  select(all_of(contains("brs")), all_of(contains("qd")), 
         all_of(contains("bris")), all_of(contains("unintent_slp")))
```

We dichotomized the results for question 2 and question 4, and labeled the categories.

```{r}
qds_all_visits <- qds_all_visits %>%
  mutate(brs_2_dichot = case_when(
          brs_2 >= 7 ~ 0,
          brs_2 < 7 ~ 1,
          TRUE ~ NA
        ),
        brs_4_dichot = case_when(
          brs_4 == 0 ~ 0,
          brs_4 > 0 ~ 1,
          TRUE ~ NA
        )
      )

attr(qds_all_visits$brs_2_dichot, 'label') <- "Average Hours of Sleep dichot"
attr(qds_all_visits$brs_4_dichot, 'label') <- "Unintentional sleep dichot"
attr(qds_all_visits$brs_2_dichot, 
     'labels') <- c("7 hours or more" = 0, 
                    "less than 7 hours" = 1)
attr(qds_all_visits$brs_4_dichot, 
     'labels') <- c("No unintentional sleeping" = 0, 
                    "at least one day of unintentional sleeping" = 1)
```

We recalculated the variable map for this instrument, and updated our variable map with the desired order.

```{r}
map_temp_tibble <- tibble::tibble(
  'variable' = c('brs_2_dichot', 'brs_4_dichot'),
  'section' = 'Health',
  'sec_ord' = 4,
  'instrument' = 'BRFSS Inadequate Sleep',
  'inst_ord' = 10,
  'item_ord' = c(3,6),
  'v1' = NA, 'v2' = NA, 'v3' = NA, 'v4' = NA, 'v5' = NA,
  drop_consolidated = NA,
  calculated = TRUE
)

inst_map <- variable_map[variable_map$instrument == "BRFSS Inadequate Sleep",] %>%
  mutate(item_ord = case_when(
    (item_ord > 2) & (item_ord < 5) ~ item_ord + 1,
    (item_ord > 4) ~ item_ord + 2,
    TRUE ~ item_ord
  ))

inst_map <- rbind(inst_map, map_temp_tibble)

variable_map <- variable_map[variable_map$instrument != 
                               "BRFSS Inadequate Sleep",] %>%
  rbind(inst_map) %>%
  arrange(sec_ord, inst_ord, item_ord)

variable_map[variable_map$instrument == "BRFSS Inadequate Sleep",]
```

We added these resolved variables to our resolved list.

```{r}
resolved_vars <- c(resolved_vars, checking_vars[str_detect(checking_vars, 
                       "((brs)|(BRS)|(bris)|(BRIS)|(qd)|(QD)|(unintent_slp))")])

checking_vars <- setdiff(drop_vars, resolved_vars)
```

### Alcohol Quantity and Frequency Questionnaire

We found 12 dropped calculated variables that referenced the Alcohol Quantity and Frequency Questionnaire measures. We isolated these variables from Visit 1 to assess for labels and other attributes.

```{r}
checking_vars[str_detect(checking_vars, 
                         "(((^Alc)|(^ALC)|(^alc))|((drink)|(DRINK)))")]

checking_cols <- v1 %>%
  select(all_of(drop_v1)) %>%
  select(all_of(starts_with("af")), all_of(starts_with("alc")),
         all_of(contains("drink")))
```

We calculated the total for item 1. We also calculated if each subject was or was not a heavy drinker, number of days binge drinking, and a binary category indicating if a subject engaged in binge drinking in the past 30 days.

```{r}
qds_all_visits <- qds_all_visits %>%
  mutate(
      af_1_val = case_when(
        af_1 == 0 ~ 0,
        af_1 > 0 ~ (af_2m + af_3tu + af_4w + af_5th + af_6f + af_7sa + af_8su),
        TRUE ~ NA
      ),
      af_1_heavy = case_when(
        ((gender == 0) & (af_1_val <= 14)) ~ 0,
        ((gender == 0) & (af_1_val > 14)) ~ 1,
        ((gender == 1) & (af_1_val <= 7)) ~ 0,
        ((gender == 1) & (af_1_val > 7)) ~ 1,
        TRUE ~ NA
      ),
      af_9_val = case_when(
        (af_9 == 0) ~ af_9a,
        (af_9 == 1) ~ af_9b,
        (af_9 == 2) ~ af_9c,
        TRUE ~ NA
      ),
      af_9_binge = case_when(
        af_9_val >= 1 ~ 1,
        af_9_val == 0 ~ 0,
        TRUE ~ NA
      )
    )

attr(qds_all_visits$af_1_val, 'label') <- "Total drinks in an average week"
attr(qds_all_visits$af_1_heavy, 
     'label') <- "Heavy drinking (men > 14 drinks per week, women > 7 drinks per week)"
attr(qds_all_visits$af_9_val, 
     'label') <- "How often in the past 30 days have you consumed (4 if female; 5 if male) or more STANDARD DRINKS?"
attr(qds_all_visits$af_9_binge, 'label') <- "Binge drinking in the past 30 days"


attr(qds_all_visits$af_1_heavy, 'labels') <- c("not a heavy drinker" = 0, 
                                                "heavy drinker" = 1)
attr(qds_all_visits$af_9_binge, 
     'labels') <- c("no binge drinking in the past 30 days" = 0,
                    "binge drinking in the past 30 days" = 1)
```

We recalculated the variable map for this instrument, and updated our variable map with the desired order.

```{r}
map_temp_tibble <- tibble::tibble(
  'variable' = c('af_1_val', 'af_1_heavy', 'af_9_val', 'af_9_binge'),
  'section' = 'Health',
  'sec_ord' = 4,
  'instrument' = 'Alcohol Quantity and Frequency Questionnaire',
  'inst_ord' = 11,
  'item_ord' = c(3, 4, 13, 14),
  'v1' = NA, 'v2' = NA, 'v3' = NA, 'v4' = NA, 'v5' = NA,
  drop_consolidated = NA,
  calculated = TRUE
)

inst_map <- variable_map[variable_map$instrument == 
               "Alcohol Quantity and Frequency Questionnaire",] %>%
  mutate(item_ord = case_when(
    item_ord < 3 ~ item_ord,
    item_ord > 10 ~ item_ord + 4,
    (item_ord <= 10) & (item_ord > 2) ~ item_ord + 2
  ))

inst_map <- rbind(inst_map, map_temp_tibble)

variable_map <- variable_map[variable_map$instrument != 
                               "Alcohol Quantity and Frequency Questionnaire",] %>%
  rbind(inst_map) %>%
  arrange(sec_ord, inst_ord, item_ord)

variable_map[variable_map$instrument == 
               "Alcohol Quantity and Frequency Questionnaire",]
```

We added these resolved variables to our resolved list.

```{r}
resolved_vars <- c(resolved_vars, checking_vars[str_detect(checking_vars, 
                         "(((^Alc)|(^ALC)|(^alc))|((drink)|(DRINK)))")])

checking_vars <- setdiff(drop_vars, resolved_vars)
```

### Personality Beliefs Questionnaire

We found 1 dropped calculated variable that referenced the Personality Beliefs Questionnaire measures. We isolated that variable from Visit 2 to assess for labels and other attributes.

```{r}
checking_vars[str_detect(checking_vars, 
                         "((pbq)|(PBQ))")]

checking_cols <- v2 %>%
  select(all_of(drop_v2)) %>%
  select(all_of(starts_with("pbq")))
```

We calculated the total for the instrument

```{r}
qds_all_visits <- qds_all_visits %>%
  mutate(
      pbq_total = (pbq_1 + pbq_2 + pbq_3 + pbq_4 + pbq_5 + pbq_6 + pbq_7)
    )

attr(qds_all_visits$pbq_total, 
     'label') <- "Personality Beliefs Questionaire Antisocial Subscale total"

```

We recalculated the variable map for this instrument, and updated our variable map with the desired order.

```{r}
map_temp_tibble <- tibble::tibble(
  'variable' = c('pbq_total'),
  'section' = 'Health',
  'sec_ord' = 4,
  'instrument' = 'Personality Beliefs Questionnaire',
  'inst_ord' = 13,
  'item_ord' = c(8),
  'v1' = NA, 'v2' = NA, 'v3' = NA, 'v4' = NA, 'v5' = NA,
  drop_consolidated = NA,
  calculated = TRUE
)

inst_map <- variable_map[variable_map$instrument == 
               "Personality Beliefs Questionnaire",]

inst_map <- rbind(inst_map, map_temp_tibble)

variable_map <- variable_map[variable_map$instrument != 
                               "Personality Beliefs Questionnaire",] %>%
  rbind(inst_map) %>%
  arrange(sec_ord, inst_ord, item_ord)

variable_map[variable_map$instrument == 
               "Personality Beliefs Questionnaire",]
```

We added these resolved variables to our resolved list.

```{r}
resolved_vars <- c(resolved_vars, checking_vars[str_detect(checking_vars, 
                         "((PBQ)|(pbq))")])

checking_vars <- setdiff(drop_vars, resolved_vars)
```

### USDA Food Security Survey

We found 37 dropped calculated variables that referenced the USDA Food Security Survey measures. We isolated these variables from Visit 2 to assess for labels and other attributes.

```{r}
checking_vars[str_detect(checking_vars,  "((^FSS)|(^fss))")]

checking_cols <- v2 %>%
  select(all_of(drop_v2)) %>%
  select(all_of(starts_with("fss")))
```

We calculated scoring for each item, the total scale, and the category interpretations of the scores for this instrument.

```{r}
qds_all_visits <- qds_all_visits %>%
  mutate(
      fss_1_dichot = case_when(
        ((fss_1 == 0) | (fss_1 == 1)) ~ 1,
        ((fss_1 == 2) | (fss_1 == 99)) ~ 0,
        TRUE ~ NA
      ),
      fss_2_dichot = case_when(
        ((fss_2 == 0) | (fss_2 == 1)) ~ 1,
        ((fss_2 == 2) | (fss_2 == 99)) ~ 0,
        TRUE ~ NA
      ),
      fss_3_dichot = case_when(
        (fss_3 == 1) ~ 1,
        ((fss_3 == 0) | (fss_3 == 9)) ~ 0,
        TRUE ~ NA
      ),
      fss_3a_dichot = case_when(
        ((fss_3a == 0) | (fss_3a == 1)) ~ 1,
        ((fss_3a == 1) | (fss_3a == 9) | (fss_3 == 0)) ~ 0,
        TRUE ~ NA
      ),
      fss_4_dichot = case_when(
        (fss_4 == 1) ~ 1,
        ((fss_4 == 0) | (fss_4 == 9)) ~ 0,
        TRUE ~ NA
      ),
     fss_5_dichot = case_when(
        (fss_5 == 1) ~ 1,
        ((fss_5 == 0) | (fss_5 == 9)) ~ 0,
        TRUE ~ NA
      ),
     fss_total = (fss_1_dichot + fss_2_dichot + fss_3_dichot + fss_3a_dichot +
                    fss_4_dichot + fss_5_dichot),
     fss_cat = case_when(
       (fss_total <= 1) ~ 1,
       ((fss_total < 5) & (fss_total > 1)) ~ 2,
       (fss_total >=5) ~ 3,
       TRUE ~ NA
     ),
     fss_cat_dichot = case_when(
       fss_total <= 1 ~ 1,
       fss_total > 1 ~ 2,
       TRUE ~ NA
     )
    )

attr(qds_all_visits$fss_1_dichot, 
     'label') <- "food didn't last dichot"
attr(qds_all_visits$fss_2_dichot, 
     'label') <- "unable to afford balanced meals dichot"
attr(qds_all_visits$fss_3_dichot, 
     'label') <- "cut/skip meal due to cost dichot"
attr(qds_all_visits$fss_3a_dichot, 
     'label') <- "frequency of cutting/skipping meals dichot"
attr(qds_all_visits$fss_4_dichot, 
     'label') <- "ate less than felt one should due to cost dichot"
attr(qds_all_visits$fss_5_dichot, 
     'label') <- "hungry but didn't eat due to cost dichot"
attr(qds_all_visits$fss_total, 
     'label') <- "Total USDA Food Security Survey score"
attr(qds_all_visits$fss_cat, 
     'label') <- "Food security status"
attr(qds_all_visits$fss_cat_dichot, 
     'label') <- "Food security status dichot"

for (i in c(1:5)) {
  attr(qds_all_visits[[paste0("fss_", i, "_dichot")]], 
       "labels") <- c("no" = 0, "affirmative yes" = 1)
  
}

attr(qds_all_visits$fss_3a_dichot, 'labels') <- 
  c("1 to 2 days per month or less" = 0, "some days to every day" = 1)

attr(qds_all_visits$fss_cat, 'labels') <- c("High or marginal food security" = 1, 
                                            "Low food security" = 2,
                                            "Very low food security" = 3)
attr(qds_all_visits$fss_cat_dichot, 'labels') <- c("food secure" = 1, 
                                                   "food insecure" = 2)
```

We recalculated the variable map for this instrument, and updated our variable map with the desired order.

```{r}
map_temp_tibble <- tibble::tibble(
  'variable' = c('fss_1_dichot', 'fss_2_dichot', 'fss_3_dichot', 'fss_3a_dichot',
                 'fss_4_dichot', 'fss_5_dichot', 'fss_total', 'fss_cat', 
                 'fss_cat_dichot'),
  'section' = 'Health',
  'sec_ord' = 4,
  'instrument' = 'USDA Food Security Survey',
  'inst_ord' = 14,
  'item_ord' = c(2, 4, 6, 8, 10, 12, 13, 14, 15),
  'v1' = NA, 'v2' = NA, 'v3' = NA, 'v4' = NA, 'v5' = NA,
  drop_consolidated = NA,
  calculated = TRUE
)

inst_map <- variable_map[variable_map$instrument == 
                           "USDA Food Security Survey",] %>%
  mutate(item_ord = (item_ord *2) -1
  )

inst_map <- rbind(inst_map, map_temp_tibble)

variable_map <- variable_map[variable_map$instrument != 
                               "USDA Food Security Survey",] %>%
  rbind(inst_map) %>%
  arrange(sec_ord, inst_ord, item_ord)

variable_map[variable_map$instrument == 
               "USDA Food Security Survey",]
```

We added these resolved variables to our resolved list.

```{r}
resolved_vars <- c(resolved_vars, checking_vars[str_detect(checking_vars,  
                                                           "((^FSS)|(^fss))")])

checking_vars <- setdiff(drop_vars, resolved_vars)
```

### TCU CJ Client Evaluation of Self and Treatment (CJ CEST)

We found 16 dropped calculated variables that referenced the TCU CJ Client Evaluation of Self and Treatment (CJ CEST) measures. We isolated these variables from Visit 2 to assess for labels and other attributes.

```{r}
checking_vars[str_detect(checking_vars, 
         "((CJ)|(cj)|(TCU_[^Dd])|(tcu_[^Dd])|(TCU_[Dd][Ee])|(tcu_[Dd][Ee]))")]

checking_cols <- v2 %>%
  select(all_of(drop_v2)) %>%
  select(all_of(contains("cj")), all_of(starts_with("TCU_de")),
         all_of(starts_with("TCU_t")), all_of(starts_with("TCU_h")),
         all_of(starts_with("TCU_te")))
```

We calculated the subscores, with care taken for reverse scoring of Questions 21-25 and 34-36.

```{r}
qds_all_visits <- qds_all_visits %>%
  mutate(cj_desire = ifelse(cj_1 == 0, 
                            ((cj_2 + cj_3 + cj_4 + cj_5 + cj_6 + cj_7)*10/6),
                            NA
                            ),
        cj_needs = ((cj_8 + cj_9 + cj_10 + cj_11 + cj_12)*10/5),
        cj_satisfaction = ((cj_13 + cj_14 + cj_15 + cj_16 + cj_17 + cj_18 + 
                       cj_19) *10/7),
        cj_selfesteem = ((cj_20 + (6 - cj_21) + (6 - cj_22) + (6 - cj_23) +
                            (6 - cj_24) + (6 - cj_25))*10/6),
        cj_hostility = ((cj_26 + cj_27 + cj_28 + cj_29 + cj_30 + cj_31 + cj_32 
                         + cj_33)*10/8),
        cj_risktaking = (((6 - cj_34) + (6 - cj_35) + (6 - cj_36) + cj_37 +
                             cj_38 + cj_39 + cj_40)*10/7)
      )

attr(qds_all_visits$cj_desire, 
     'label') <- "TCU CJ desire for help subscale score"
attr(qds_all_visits$cj_needs, 
     'label') <- "TCU CJ treatment needs subscale score"
attr(qds_all_visits$cj_satisfaction, 
     'label') <- "TCU CJ treatment satisfaction subscale score"
attr(qds_all_visits$cj_selfesteem, 
     'label') <- "TCU CJ self-esteem subscale score"
attr(qds_all_visits$cj_hostility, 
     'label') <- "TCU CJ hostility subscale score"
attr(qds_all_visits$cj_risktaking, 
     'label') <- "TCU CJ risk taking subscale score"
```

We recalculated the variable map for this instrument, and updated our variable map with the desired order.

```{r}
map_temp_tibble <- tibble::tibble(
  'variable' = c('cj_desire', 'cj_needs', 'cj_satisfaction', 'cj_selfesteem',
                 'cj_hostility', 'cj_risktaking'),
  'section' = 'Health',
  'sec_ord' = 4,
  'instrument' = 'TCU CJ Client Evaluation of Self and Treatment (CJ CEST)',
  'inst_ord' = 16,
  'item_ord' = c(41, 42, 43, 44, 45, 46),
  'v1' = NA, 'v2' = NA, 'v3' = NA, 'v4' = NA, 'v5' = NA,
  drop_consolidated = NA,
  calculated = TRUE
)

inst_map <- variable_map[variable_map$instrument == 
               "TCU CJ Client Evaluation of Self and Treatment (CJ CEST)",]

inst_map <- rbind(inst_map, map_temp_tibble)

variable_map <- variable_map[variable_map$instrument != 
             "TCU CJ Client Evaluation of Self and Treatment (CJ CEST)",] %>%
  rbind(inst_map) %>%
  arrange(sec_ord, inst_ord, item_ord)

variable_map[variable_map$instrument == 
               "TCU CJ Client Evaluation of Self and Treatment (CJ CEST)",]
```

We added these resolved variables to our resolved list.

```{r}
resolved_vars <- c(resolved_vars, checking_vars[str_detect(checking_vars, 
         "((CJ)|(cj)|(TCU_[^Dd])|(tcu_[^Dd])|(TCU_[Dd][Ee])|(tcu_[Dd][Ee]))")])

checking_vars <- setdiff(drop_vars, resolved_vars)
```

## Stress

### Detroit Area Study Assessment of Day-to-Day Discrimination

We found 4 dropped calculated variables that referenced the Detroit Area Study Assessment of Day-to-Day Discrimination measures. We isolated these variables from Visit 1 to assess for labels and other attributes.

```{r}
checking_vars[str_detect(checking_vars, "(^dd)|(^DD)")]

checking_cols <- v1 %>%
  select(all_of(drop_v1)) %>%
  select(all_of(starts_with("dd")))
```

We calculated the total score for the instrument.

```{r}
qds_all_visits <- qds_all_visits %>%
  mutate(dd_total = (dd_1 + dd_2 + dd_3 + dd_4 + dd_5 + dd_6 + dd_7 + 
                       dd_8 + dd_9)
         )

attr(qds_all_visits$dd_total, 'label') <- "DD total"
```

We recalculated the variable map for this instrument, and updated our variable map with the desired order.

```{r}
map_temp_tibble <- tibble::tibble(
  'variable' = c('dd_total'),
  'section' = 'Stress',
  'sec_ord' = 5,
  'instrument' = 'Detroit Area Study Assessment of Day-to-Day Discrimination',
  'inst_ord' = 1,
  'item_ord' = c(11),
  'v1' = NA, 'v2' = NA, 'v3' = NA, 'v4' = NA, 'v5' = NA,
  drop_consolidated = NA,
  calculated = TRUE
)

inst_map <- variable_map[variable_map$instrument == 
               "Detroit Area Study Assessment of Day-to-Day Discrimination",]

inst_map <- rbind(inst_map, map_temp_tibble)

variable_map <- variable_map[variable_map$instrument != 
           "Detroit Area Study Assessment of Day-to-Day Discrimination",] %>%
  rbind(inst_map) %>%
  arrange(sec_ord, inst_ord, item_ord)

variable_map[variable_map$instrument == 
               "Detroit Area Study Assessment of Day-to-Day Discrimination",]
```

We added these resolved variables to our resolved list.

```{r}
resolved_vars <- c(resolved_vars, 
                   checking_vars[str_detect(checking_vars, "(^dd)|(^DD)")])

checking_vars <- setdiff(drop_vars, resolved_vars)
```

### MacArthur Major Discrimination

We found 1 dropped calculated variable that referenced the MacArthur Major Discrimination measures. We isolated this variable from Visit 2 to assess for labels and other attributes.

```{r}
checking_vars[str_detect(checking_vars, "(^mmd)|(^MMD)")]

checking_cols <- v2 %>%
  select(all_of(drop_v2)) %>%
  select(all_of(starts_with("mmd")))
```

We calculated the total score for the instrument.

```{r}
qds_all_visits <- qds_all_visits %>%
  mutate(mmd_total = (mmd_1a + mmd_1b + mmd_1c + mmd_1d + mmd_1f + mmd_1g +
                        mmd_1h + mmd_1i + mmd_1j + mmd_1k)
         )

attr(qds_all_visits$mmd_total, 'label') <- "MacArthur Major Discrimination total"
```

We recalculated the variable map for this instrument, and updated our variable map with the desired order.

```{r}
map_temp_tibble <- tibble::tibble(
  'variable' = c('mmd_total'),
  'section' = 'Stress',
  'sec_ord' = 5,
  'instrument' = 'MacArthur Major Discrimination',
  'inst_ord' = 2,
  'item_ord' = c(12),
  'v1' = NA, 'v2' = NA, 'v3' = NA, 'v4' = NA, 'v5' = NA,
  drop_consolidated = NA,
  calculated = TRUE
)

inst_map <- variable_map[variable_map$instrument == 
               "MacArthur Major Discrimination",] %>%
  mutate(item_ord = ifelse((item_ord >= 12), item_ord + 1, item_ord))

inst_map <- rbind(inst_map, map_temp_tibble)

variable_map <- variable_map[variable_map$instrument != 
           "MacArthur Major Discrimination",] %>%
  rbind(inst_map) %>%
  arrange(sec_ord, inst_ord, item_ord)

variable_map[variable_map$instrument == 
               "MacArthur Major Discrimination",]
```

We added these resolved variables to our resolved list.

```{r}
resolved_vars <- c(resolved_vars, 
                   checking_vars[str_detect(checking_vars, "(^mmd)|(^MMD)")])

checking_vars <- setdiff(drop_vars, resolved_vars)
```

### Urban Life Stress Scale

We found 4 dropped calculated variables that referenced the Urban Life Stress Scale measures. We isolated these variables from Visit 2 to assess for labels and other attributes.

```{r}
checking_vars[str_detect(checking_vars, "(^uls)|(^ULS)")]

checking_cols <- v2 %>%
  select(all_of(drop_v2)) %>%
  select(all_of(starts_with("uls")))
```

We calculated the score for the item.

```{r}
qds_all_visits <- qds_all_visits %>%
  mutate(uls_total = (uls_1 + uls_2 + uls_3 + uls_4 + uls_5 + uls_6 + uls_7 +
                        uls_8 + uls_9 + uls_10 + uls_11 + uls_12 + uls_13 + 
                        uls_14 + uls_15 + uls_16 + uls_17 + uls_18 + uls_19 +
                        uls_20 + uls_21)
         )

attr(qds_all_visits$uls_total, 'label') <- "Urban Life Stress Scale Total"

```

We recalculated the variable map for this instrument, and updated our variable map with the desired order.

```{r}
map_temp_tibble <- tibble::tibble(
  'variable' = c('uls_total'),
  'section' = 'Stress',
  'sec_ord' = 5,
  'instrument' = 'Urban Life Stress Scale',
  'inst_ord' = 3,
  'item_ord' = c(22),
  'v1' = NA, 'v2' = NA, 'v3' = NA, 'v4' = NA, 'v5' = NA,
  drop_consolidated = NA,
  calculated = TRUE
)

inst_map <- variable_map[variable_map$instrument ==  
                           "Urban Life Stress Scale",]

inst_map <- rbind(inst_map, map_temp_tibble)

variable_map <- variable_map[variable_map$instrument != 
           "Urban Life Stress Scale",] %>%
  rbind(inst_map) %>%
  arrange(sec_ord, inst_ord, item_ord)

variable_map[variable_map$instrument == 
               "Urban Life Stress Scale",]
```

We added these resolved variables to our resolved list.

```{r}
resolved_vars <- c(resolved_vars, 
                  checking_vars[str_detect(checking_vars, "(^uls)|(^ULS)")])

checking_vars <- setdiff(drop_vars, resolved_vars)
```

### Perceived Stress Scale

We found 12 dropped calculated variables that referenced the Perceived Stress Scale measures. We isolated these variables from Visit 2 to assess for labels and other attributes.

```{r}
checking_vars[str_detect(checking_vars, "(^PS)|(^ps)")]

checking_cols <- v2 %>%
  select(all_of(drop_v2)) %>%
  select(all_of(starts_with("ps")))
```

We calculated the score for the item, taking care to reverse scoring for Questions 2 and 3.

```{r}
qds_all_visits <- qds_all_visits %>%
  mutate(ps_total = (ps_1 + (4 - ps_2) + (4 - ps_3) + ps_4)
         )

attr(qds_all_visits$ps_total, 'label') <- "Percieved Stress Score Total"

```

We recalculated the variable map for this instrument, and updated our variable map with the desired order.

```{r}
map_temp_tibble <- tibble::tibble(
  'variable' = c('ps_total'),
  'section' = 'Stress',
  'sec_ord' = 5,
  'instrument' = 'Perceived Stress Scale',
  'inst_ord' = 5,
  'item_ord' = c(5),
  'v1' = NA, 'v2' = NA, 'v3' = NA, 'v4' = NA, 'v5' = NA,
  drop_consolidated = NA,
  calculated = TRUE
)

inst_map <- variable_map[variable_map$instrument ==  
                           "Perceived Stress Scale",]

inst_map <- rbind(inst_map, map_temp_tibble)

variable_map <- variable_map[variable_map$instrument != 
           "Perceived Stress Scale",] %>%
  rbind(inst_map) %>%
  arrange(sec_ord, inst_ord, item_ord)

variable_map[variable_map$instrument == 
               "Perceived Stress Scale",]
```

We added these resolved variables to our resolved list.

```{r}
resolved_vars <- c(resolved_vars, 
                   checking_vars[str_detect(checking_vars, "(^PS)|(^ps)")])

checking_vars <- setdiff(drop_vars, resolved_vars)
```


### Distress Tolerance Scale (DTS) 

We found 20 dropped calculated variables that referenced the Distress Tolerance Scale (DTS) measures. We isolated these variables from Visit 2 to assess for labels and other attributes.

```{r}
checking_vars[str_detect(checking_vars, "(^dts)|(^DTS)")]

checking_cols <- v2 %>%
  select(all_of(drop_v2)) %>%
  select(all_of(starts_with("dts")))
```

All QDS variables were written with reverse coding, with the exception of Question 7. We calculated subscales within the instrument. Question 6 is not used in scoring, and was a reversal of Question 8.

```{r}
qds_all_visits <- qds_all_visits %>%
  mutate(dts_tolerance = ( ((6 - dts_1) + (6 - dts_3) + (6 - dts_5))/3),
         dts_absorption = ( ((6 - dts_2) + (6 - dts_4) + (6 - dts_16))/3),
         dts_appraisal =( (dts_7 + (6 - dts_8) + (6 - dts_10) +(6 - dts_11) + 
                             (6 - dts_12) + (6 - dts_13))/6),
         dts_regulation = ( ((6 - dts_9) + (6 - dts_14) + (6 - dts_15))/3),
         dts_total = ((dts_tolerance + dts_absorption + dts_appraisal + 
                         dts_regulation)/4)
         )

attr(qds_all_visits$dts_tolerance, 'label') <- "DTS Tolerance Subscale Mean"
attr(qds_all_visits$dts_absorption, 'label') <- "DTS Absorption Subscale Mean"
attr(qds_all_visits$dts_appraisal, 'label') <- "DTS Appraisal Subscale Mean"
attr(qds_all_visits$dts_regulation, 'label') <- "DTS Regulation Subscale Mean"
attr(qds_all_visits$dts_total, 'label') <- "DTS Total Mean"
```

We recalculated the variable map for this instrument, and updated our variable map with the desired order.

```{r}
map_temp_tibble <- tibble::tibble(
  'variable' = c('dts_tolerance', 'dts_absorption', 'dts_appraisal',
                 'dts_regulation', 'dts_total'),
  'section' = 'Stress',
  'sec_ord' = 5,
  'instrument' = 'Distress Tolerance Scale (DTS)',
  'inst_ord' = 6,
  'item_ord' = c(17, 18, 19, 20, 21),
  'v1' = NA, 'v2' = NA, 'v3' = NA, 'v4' = NA, 'v5' = NA,
  drop_consolidated = NA,
  calculated = TRUE
)

inst_map <- variable_map[variable_map$instrument ==  
                           "Distress Tolerance Scale (DTS)",]

inst_map <- rbind(inst_map, map_temp_tibble)

variable_map <- variable_map[variable_map$instrument != 
           "Distress Tolerance Scale (DTS)",] %>%
  rbind(inst_map) %>%
  arrange(sec_ord, inst_ord, item_ord)

variable_map[variable_map$instrument == 
               "Distress Tolerance Scale (DTS)",]
```

We added these resolved variables to our resolved list.

```{r}
resolved_vars <- c(resolved_vars, 
                   checking_vars[str_detect(checking_vars, "(^dts)|(^DTS)")])

checking_vars <- setdiff(drop_vars, resolved_vars)
```

## Negative Affect

### Aggression Questionnaire (AQ-12)

We found 20 dropped calculated variables that referenced the Aggression Questionnaire (AQ-12) measures. We isolated these variables from Visit 1 to assess for labels and other attributes.

```{r}
checking_vars[str_detect(checking_vars, 
"(^((pa_)|(aq)|(va)|(ha)|(PA_)|(AQ)|(VA)|(HA)|(A_)|(a_)))|(^(a)|(A)$)|(^(pa)$)|(^(PA)$)")]

checking_cols <- v1 %>%
  select(all_of(drop_v1)) %>%
  select(AQ, PA, VA, A, HA)
```

We calculated the total of the items, and categorized the result.

```{r}
qds_all_visits <- qds_all_visits %>%
  mutate(aq_physical = (aq_1 + aq_2 + aq_3),
         aq_verbal = (aq_4 + aq_5 + aq_6),
         aq_anger = (aq_7 + aq_8 + aq_9),
         aq_hostility = (aq_10 + aq_11 + aq_12),
         aq_total = (aq_physical + aq_verbal + aq_anger + aq_hostility)
         )

attr(qds_all_visits$aq_physical, 
     'label') <- "AQ Physical Aggression subscale"
attr(qds_all_visits$aq_verbal, 
     'label') <- "AQ Verbal Aggression subscale"
attr(qds_all_visits$aq_anger, 
     'label') <- "AQ Anger subscale"
attr(qds_all_visits$aq_hostility, 
     'label') <- "AQ Hostility subscale"
attr(qds_all_visits$aq_total, 
     'label') <- "AQ Total"
```

We recalculated the variable map for this instrument, and updated our variable map with the desired order.

```{r}
map_temp_tibble <- tibble::tibble(
  'variable' = c('aq_physical', 'aq_verbal', 'aq_anger', 'aq_hostility',
                 'aq_total'),
  'section' = 'Negative Affect',
  'sec_ord' = 6,
  'instrument' = 'Aggression Questionnaire (AQ-12)',
  'inst_ord' = 1,
  'item_ord' = c(13, 14, 15, 16, 17),
  'v1' = NA, 'v2' = NA, 'v3' = NA, 'v4' = NA, 'v5' = NA,
  drop_consolidated = NA,
  calculated = TRUE
)

inst_map <- variable_map[variable_map$instrument == 
               "Aggression Questionnaire (AQ-12)",]

inst_map <- rbind(inst_map, map_temp_tibble)

variable_map <- variable_map[variable_map$instrument != 
                               "Aggression Questionnaire (AQ-12)",] %>%
  rbind(inst_map) %>%
  arrange(sec_ord, inst_ord, item_ord)

variable_map[variable_map$instrument == "Aggression Questionnaire (AQ-12)",]
```

We added these resolved variables to our resolved list.

```{r}
resolved_vars <- c(resolved_vars, checking_vars[str_detect(checking_vars, 
"(^((pa_)|(aq)|(va)|(ha)|(PA_)|(AQ)|(VA)|(HA)|(A_)|(a_)))|(^(a)|(A)$)|(^(pa)$)|(^(PA)$)")])

checking_vars <- setdiff(drop_vars, resolved_vars)
```

### Center for Epidemiological Studies Depression (CES-D)

We found 64 dropped calculated variables that referenced the Center for Epidemiological Studies Depression (CES-D) measures. We isolated these variables from Visit 1 to assess for labels and other attributes.

```{r}
checking_vars[str_detect(checking_vars, "((ces)|(CES))")]

checking_cols <- v1 %>%
  select(all_of(drop_v1)) %>%
  select(starts_with("ces"))
```

We calculated the overall total, taking care to ensure reverse scoring of items 5 and 8, and the resulting category based on this score.

```{r}
qds_all_visits <- qds_all_visits %>%
  mutate(ces_total = (ces_1 + ces_2 + ces_3 + ces_4 + (3-ces_5) + ces_6 +
                         ces_7 + (3-ces_8) + ces_9 + ces_10),
         ces_total_cat = case_when(
           ces_total >= 10 ~ 1,
           ces_total < 10 ~ 0,
           TRUE ~ NA
         ))

attr(qds_all_visits$ces_total, 'label') <- "CESD Total"
attr(qds_all_visits$ces_total_cat, 'label') <- "CESD outcome categorized"
attr(qds_all_visits$ces_total_cat, 'labels') <- c("not depressed" = 0, 
                                                  "depressed" = 1)
```

We also dichotomized all of the variables, taking care to ensure reverse scoring of items 5 and 8.

```{r}
qds_all_visits <- qds_all_visits %>%
  mutate(
    ces_1_dichot = case_when(
      (ces_1 == 0) | (ces_1 == 1) ~ 0,
      (ces_1 == 2) | (ces_1 == 3) ~ 1,
      TRUE ~ NA
      ),
    ces_2_dichot = case_when(
      (ces_2 == 0) | (ces_2 == 1) ~ 0,
      (ces_2 == 2) | (ces_2 == 3) ~ 1,
      TRUE ~ NA
      ),
    ces_3_dichot = case_when(
      (ces_3 == 0) | (ces_3 == 1) ~ 0,
      (ces_3 == 2) | (ces_3 == 3) ~ 1,
      TRUE ~ NA
      ),         
    ces_4_dichot = case_when(
      (ces_4 == 0) | (ces_4 == 1) ~ 0,
      (ces_4 == 2) | (ces_4 == 3) ~ 1,
      TRUE ~ NA
      ),
    # Reverse score Q5
    ces_5_dichot = case_when(
      (ces_5 == 2) | (ces_5 == 3) ~ 0,
      (ces_5 == 0) | (ces_5 == 1) ~ 1,
      TRUE ~ NA
      ),
    ces_6_dichot = case_when(
      (ces_6 == 0) | (ces_6 == 1) ~ 0,
      (ces_6 == 2) | (ces_6 == 3) ~ 1,
      TRUE ~ NA
      ),
    ces_7_dichot = case_when(
      (ces_7 == 0) | (ces_7 == 1) ~ 0,
      (ces_7 == 2) | (ces_7 == 3) ~ 1,
      TRUE ~ NA
      ),
    # Reverse score Q8
    ces_8_dichot = case_when(
      (ces_8 == 2) | (ces_8 == 3) ~ 0,
      (ces_8 == 0) | (ces_8 == 1) ~ 1,
      TRUE ~ NA
      ),
    ces_9_dichot = case_when(
      (ces_9 == 0) | (ces_9 == 1) ~ 0,
      (ces_9 == 2) | (ces_9 == 3) ~ 1,
      TRUE ~ NA
      ),
    ces_10_dichot = case_when(
      (ces_10 == 0) | (ces_10 == 1) ~ 0,
      (ces_10 == 2) | (ces_10 == 3) ~ 1,
      TRUE ~ NA
      ),
    ces_dichot_total = (ces_1_dichot + ces_2_dichot + ces_3_dichot + 
      ces_4_dichot + ces_5_dichot + ces_6_dichot + ces_7_dichot + ces_8_dichot
      + ces_9_dichot + ces_10_dichot),
    ces_dichot_cat = case_when(
      ces_dichot_total >= 4 ~ 1,
      ces_dichot_total < 4 ~ 0,
      TRUE ~ NA
    )
  )

for (i in c(1:10)){
  attr(qds_all_visits[[paste0('ces_',i,'_dichot')]], 'label') <-
    paste0("CES-",i," dichot")
}

attr(qds_all_visits$ces_dichot_total, 
     'label') <- "Sum of CESD Dichotomized items"

attr(qds_all_visits$ces_dichot_cat, 
     'label') <- "CESD Dichotomized outcome categorized"
attr(qds_all_visits$ces_dichot_cat, 'labels') <- c("not depressed" = 0, 
                                                  "depressed" = 1)
```

We recalculated the variable map for this instrument, and updated our variable map with the desired order.

```{r}
new_vars <- c('ces_total', 'ces_total_cat')

for (i in c(1:10)){
  new_vars <- c(new_vars, paste0("ces_",i,"_dichot"))
}

new_vars <- c(new_vars, 'ces_dichot_total', 'ces_dichot_cat')

map_temp_tibble <- tibble::tibble(
  'variable' = new_vars,
  'section' = 'Negative Affect',
  'sec_ord' = 6,
  'instrument' = 'Center for Epidemiological Studies Depression (CES-D)',
  'inst_ord' = 2,
  'item_ord' = c(21, 22, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 23, 24),
  'v1' = NA, 'v2' = NA, 'v3' = NA, 'v4' = NA, 'v5' = NA,
  drop_consolidated = NA,
  calculated = TRUE
)

inst_map <- variable_map[variable_map$instrument == 
               "Center for Epidemiological Studies Depression (CES-D)",] %>%
  mutate(item_ord = (item_ord *2) - 1)

inst_map <- rbind(inst_map, map_temp_tibble)

variable_map <- variable_map[variable_map$instrument != 
                 "Center for Epidemiological Studies Depression (CES-D)",] %>%
  rbind(inst_map) %>%
  arrange(sec_ord, inst_ord, item_ord)

variable_map[variable_map$instrument == 
               "Center for Epidemiological Studies Depression (CES-D)",]
```

We added these resolved variables to our resolved list.

```{r}
resolved_vars <- c(resolved_vars, 
                   checking_vars[str_detect(checking_vars, "((ces)|(CES))")])

checking_vars <- setdiff(drop_vars, resolved_vars)
```

## Interpersonal Resources

### Interpersonal Support Evaluation List

We found 36 dropped calculated variables that referenced the Interpersonal Support Evaluation List measures. We isolated these variables from Visit 1 to assess for labels and other attributes.

```{r}
checking_vars[str_detect(checking_vars, "(^is)|(^IS)")]

checking_cols <- v1 %>%
  select(all_of(drop_v1)) %>%
  select(all_of(starts_with("is")))
```

We calculated subscales within the instrument, with care taken to reverse score for items 1, 5, 7, 8, 11 and 12.

```{r}
qds_all_visits <- qds_all_visits %>%
  mutate(is_app = ( (5 - is_2) + is_4 + is_6 + (5 - is_11)),
         is_bel = ( (5 - is_1) + is_5 + (5 - is_7) + is_9),
         is_tan = (is_3 + (5 - is_8) + is_10 + (5 - is_12))
         )

attr(qds_all_visits$is_app, 'label') <- "ISE appraisal"
attr(qds_all_visits$is_bel, 'label') <- "ISE belonging"
attr(qds_all_visits$is_tan, 'label') <- "ISE tangible"
```

We recalculated the variable map for this instrument, and updated our variable map with the desired order.

```{r}
map_temp_tibble <- tibble::tibble(
  'variable' = c('is_app', 'is_bel', 'is_tan'),
  'section' = 'Interpersonal/Intrapersonal Resources',
  'sec_ord' = 7,
  'instrument' = 'Interpersonal Support Evaluation List',
  'inst_ord' = 1,
  'item_ord' = c(13, 14, 15),
  'v1' = NA, 'v2' = NA, 'v3' = NA, 'v4' = NA, 'v5' = NA,
  drop_consolidated = NA,
  calculated = TRUE
)

inst_map <- variable_map[variable_map$instrument == 
               "Interpersonal Support Evaluation List",]

inst_map <- rbind(inst_map, map_temp_tibble)

variable_map <- variable_map[variable_map$instrument != 
                               "Interpersonal Support Evaluation List",] %>%
  rbind(inst_map) %>%
  arrange(sec_ord, inst_ord, item_ord)

variable_map[variable_map$instrument == "Interpersonal Support Evaluation List",]
```

We added these resolved variables to our resolved list.

```{r}
resolved_vars <- c(resolved_vars, 
                   checking_vars[str_detect(checking_vars, "(^is)|(^IS)")])

checking_vars <- setdiff(drop_vars, resolved_vars)
```


### Lubben Social Network Scale 6

We found 12 dropped calculated variables that referenced the Lubben Social Network Scale 6 measures. We isolated these variables from Visit 1 to assess for labels and other attributes.

```{r}
checking_vars[str_detect(checking_vars, "(^lsn)|(^LSN)")]

checking_cols <- v1 %>%
  select(all_of(drop_v1)) %>%
  select(all_of(starts_with("lsn")))
```

We calculated the subscales and categories within the instrument.

```{r}
qds_all_visits <- qds_all_visits %>%
  mutate(lsn_family = (lsn_1 + lsn_2 + lsn_3),
         lsn_family_cat = case_when(
           lsn_family < 6 ~ 0,
           lsn_family >= 6 ~ 1,
           TRUE ~ NA
         ),
         lsn_friends = (lsn_4 + lsn_5 + lsn_6),
         lsn_friends_cat = case_when(
           lsn_friends < 6 ~ 0,
           lsn_family >= 6 ~ 1,
           TRUE ~ NA
         ),
         lsn_total = lsn_family + lsn_friends,
         lsn_total_cat = case_when(
           lsn_total <= 12 ~ 0,
           lsn_total > 12 ~ 1
         )
         )

attr(qds_all_visits$lsn_family, 'label') <- "LSN Family subscale"
attr(qds_all_visits$lsn_family_cat, 'label') <- "LSN Family category"
attr(qds_all_visits$lsn_friends, 'label') <- "LSN Friends subscale"
attr(qds_all_visits$lsn_friends_cat, 'label') <- "LSN Friends category"
attr(qds_all_visits$lsn_total, 'label') <- "LSN Total"
attr(qds_all_visits$lsn_total_cat, 'label') <- "LSN Total category"

attr(qds_all_visits$lsn_family_cat, 'labels') <- c("marginal support" = 0, 
                                                  "social engagement" = 1)
attr(qds_all_visits$lsn_friends_cat, 'labels') <- c("marginal support" = 0, 
                                                  "social engagement" = 1)
attr(qds_all_visits$lsn_total_cat, 'labels') <- c("marginal support" = 0, 
                                                  "social engagement" = 1)
```

We recalculated the variable map for this instrument, and updated our variable map with the desired order.

```{r}
map_temp_tibble <- tibble::tibble(
  'variable' = c('lsn_family', 'lsn_family_cat', 'lsn_friends', 
                 'lsn_friends_cat', 'lsn_total', 'lsn_total_cat'),
  'section' = 'Interpersonal/Intrapersonal Resources',
  'sec_ord' = 7,
  'instrument' = 'Lubben Social Network Scale 6',
  'inst_ord' = 3,
  'item_ord' = c(7, 8, 9, 10, 11, 12),
  'v1' = NA, 'v2' = NA, 'v3' = NA, 'v4' = NA, 'v5' = NA,
  drop_consolidated = NA,
  calculated = TRUE
)

inst_map <- variable_map[variable_map$instrument == 
               "Lubben Social Network Scale 6",]

inst_map <- rbind(inst_map, map_temp_tibble)

variable_map <- variable_map[variable_map$instrument != 
                               "Lubben Social Network Scale 6",] %>%
  rbind(inst_map) %>%
  arrange(sec_ord, inst_ord, item_ord)

variable_map[variable_map$instrument == "Lubben Social Network Scale 6",]
```

We added these resolved variables to our resolved list.

```{r}
resolved_vars <- c(resolved_vars, 
                   checking_vars[str_detect(checking_vars, "(^lsn)|(^LSN)")])

checking_vars <- setdiff(drop_vars, resolved_vars)
```

## Fixing Loss of Attributes

We checked for variables that were missing attributes after calculation and cleaning. We found 19 such variables.

```{r}
null_vars <- c()

for (i in colnames(qds_all_visits)){
  if (is.null(attributes(qds_all_visits[[i]]))){
    null_vars <- c(null_vars, i)
  }
  
}

length(null_vars)
# 19
```

We first attempted to apply attributes from the reordered V1 data set. There were 18 variables remaining that lacked attributes.

```{r}
for (i in null_vars){
  if ((i %in% colnames(v1_reordered)) & 
       !(is.null(attributes(v1_reordered[[i]]))) ) {
    
    attributes(qds_all_visits[[i]]) <- attributes(v1_reordered[[i]])
    null_vars <- null_vars[null_vars != i]
  }
  
}

length(null_vars)
# 18
```

We next attempted to apply attributes from the reordered V2 data set. There were 18 variables remaining that lacked attributes.

```{r}
for (i in null_vars){
  if ((i %in% colnames(v2_reordered)) & 
       !(is.null(attributes(v2_reordered[[i]]))) ) {
    
    attributes(qds_all_visits[[i]]) <- attributes(v2_reordered[[i]])
    null_vars <- null_vars[null_vars != i]
  }
  
}

length(null_vars)
# 18
```

We then attempted to apply attributes from the reordered V3 data set. This resolved the variables that lacked attributes.

```{r}
for (i in null_vars){
  if ((i %in% colnames(v3_reordered)) & 
       !(is.null(attributes(v3_reordered[[i]]))) ) {
    
    attributes(qds_all_visits[[i]]) <- attributes(v3_reordered[[i]])
    null_vars <- null_vars[null_vars != i]
  }
  
}

rm(i)
length(null_vars)
# 0
```

### Purging Temporary Containers

We purged containers that were no longer necessary.

```{r}
rm(v1_reordered)
rm(v2_reordered)
rm(v3_reordered)
rm(v4_reordered)
rm(v5_reordered)
rm(set_map)
rm(null_vars)
```

## Data Check

We ensured that `drop_consolidated` was FALSE for any variable in the variable map that was missing a value for this variable.

```{r}
variable_map <- variable_map %>%
  mutate(drop_consolidated  = ifelse(is.na(drop_consolidated), 
                                     FALSE, 
                                     drop_consolidated))
```

We checked to see if there were any remaining variables that had not been resolved.

```{r}
length(setdiff(drop_vars, resolved_vars)) == 0
# TRUE
```

We checked the final dimensions of our data frames.

```{r}
dim(qds_all_visits)
# 1506 1000
dim(variable_map)
# 1013 13
```

We verified that there were no duplicated variables in our variable map.

```{r}
length(unique(variable_map$variable)) == nrow(variable_map)
# TRUE
```

We verified that there were no variables present in our combined QDS data set that were missing from our variable map.

```{r}
length(setdiff(colnames(qds_all_visits), variable_map$variable)) == 0

# TRUE
```

We verified that the only variables present in the variable map, which were not also present in the combined data set, were variables that had been intentionally dropped.

```{r}
length(setdiff(variable_map$variable, colnames(qds_all_visits)))

# 13

unique(variable_map[variable_map$variable %in% 
                      setdiff(variable_map$variable, colnames(qds_all_visits)),
                    ]$drop_consolidated)

# TRUE
```

We reordered our combined data set based on our variable map.

```{r}
var_order <- pull(variable_map %>%
  filter(!drop_consolidated) %>%
  select(variable))

length(var_order) == length(unique(var_order)) 
# TRUE
length(var_order) == length(colnames(qds_all_visits))
# TRUE
length(setdiff(var_order, colnames(qds_all_visits)))
# 0
length(setdiff(colnames(qds_all_visits), var_order))
# 0

qds_all_visits <- qds_all_visits[,var_order]
```

We purged items that were no longer needed.

```{r}
rm(v1)
rm(v2)
rm(v3)
rm(v4)
rm(v5)
rm(drop_v1)
rm(drop_v2)
rm(drop_v3)
rm(drop_v4)
rm(drop_v5)
rm(drop_vars)
rm(resolved_vars)
rm(checking_vars)
rm(checking_cols)
rm(map_temp_tibble)
rm(inst_map)
rm(new_vars)
rm(var_order)
```

# üíæ Save the data frames

```{r}
rds_path <- here("data", "qds", "qds_all_visits_import.rds") 
write_rds(qds_all_visits, rds_path)
write_rds(variable_map, here("data","variable_map.rds"))

# Michael also wants an SPSS version
spss_path <- here("data", "qds", "qds_all_visits_import.SAV")
write_sav(qds_all_visits, spss_path)
```
 
 
# Print a message for when this file is being sourced
 
```{r}
cat(
  paste0(Sys.Date(), ":"),
  "QDS data saved to", rds_path, " and ", spss_path
)
```

# BOTTOM
