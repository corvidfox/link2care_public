---
title: "Combined Data Codebook"
date: "2022-10-23 <br> Updated: `r Sys.Date()`"
format: pdf
editor: 
  markdown: 
    wrap: sentence
---

# ‚≠êÔ∏èOverview

This file generates a codebook from the combined Link2Care (L2C) data set and variable map using Codebookr. It also creates a more stylized and human-legible form of the Variable Map, with any identifiers in labels removed.

# üì¶Load packages & Functions

```{r, message=FALSE, warning=FALSE}
library(dplyr, warn.conflicts = FALSE)
library(codebookr, warn.conflicts = FALSE)
library(purrr, warn.conflicts = FALSE)
library(here, warn.conflicts = FALSE)
library(stringr, warn.conflicts = FALSE)
library(lubridate, warn.conflicts = FALSE)
library(readxl, warn.conflicts = FALSE)
library(openxlsx, warn.conflicts = FALSE)
library(readr, warn.conflicts = FALSE)
library(tidyverse, warn.conflicts = FALSE)
```

```{r}
source(here::here("R", "vm_check.R"))
source(here::here("R", "data_cols.R"))
```

# üì• Import data

## Combined Data Set

We imported our Combined Data Set

```{r}
combined_data_path <- here::here(
  "data", "Combined Participant Data", "combined_data_03.rds"
  )
```

Import the data.
Check the most recent file modification dates and print for user when this file is being sourced.

```{r message=FALSE}
combined_data <- readr::read_rds(combined_data_path)

# Print a message for when this file is being sourced
cat(
  paste0(Sys.Date(), ":"),
  "Combined data imported with", nrow(combined_data), "rows and", 
  ncol(combined_data), "columns.\n"
)

# Check the most recent file modification dates and print for user when this
# file is being sourced.

cat(
      "Combined data last modified on OneDrive", 
      as.character(file.info(combined_data_path)$mtime), "\n"
    )

# 2024-01-08: Combined data imported with 1606 rows and 1129 columns.
# Combined data last modified on OneDrive 2024-01-08 13:26:05 
```

We purged the import path for memory management.

```{r}
rm(combined_data_path)
```

## Variable Map

We imported our Variable Map.

```{r}
variable_map_path <- here::here(
  "data", "Combined Participant Data", "variable_map_03.rds"
  )
```

Import the data.
Check the most recent file modification dates and print for user when this file is being sourced.

```{r message=FALSE}
variable_map <- readr::read_rds(variable_map_path)

# Print a message for when this file is being sourced
cat(
  paste0(Sys.Date(), ":"),
  "Variable Map imported with", nrow(variable_map), "rows and", 
  ncol(variable_map), "columns.\n"
)

# Check the most recent file modification dates and print for user when this
# file is being sourced.

cat(
      "Variable Map data last modified on OneDrive", 
      as.character(file.info(variable_map_path)$mtime), "\n"
    )

# 2024-01-08: Variable Map imported with 1148 rows and 25 columns.
# Variable Map data last modified on OneDrive 2024-01-08 13:26:05
```

We ensured our Variable Map met our required minimum format.

```{r}
vm_check(variable_map)
# TRUE
```

We purged the import path for memory management.

```{r}
rm(variable_map_path)
```

# Codebook

## Modifying Interviewer and Care Manager Columns for Codebook Display

We stripped the labels from our Variable Map, to reduce processing errors when using `pull()`

```{r}
stripped_map <- variable_map

for (var_name in colnames(stripped_map)){
  attributes(stripped_map[[var_name]])$label <- NULL
}
```

We ensured the Value Labels were applied to each of our columns, based on the Variable Map.

```{r}
for (var_name in colnames(combined_data)){
  # Value Labels
   attributes(
     combined_data[[var_name]]
     )$labels <- pull(
       stripped_map |>
        filter(final_variable == var_name) |>
        select(attr_var_labels)
       )[[1]] 
}
```

We dropped the labels from the interviewer and case manager variables to protect these identifier variables.

```{r}
# INTERVIEWER

var_val_labels <- tibble::tibble(
      'val_text' = names(attributes(combined_data[['interviewer']])$labels)
    ) |>
  rowwise() |>
      mutate(
        'val' = attributes(combined_data[['interviewer']])$labels[[val_text]]
        ) |>
  ungroup()

combined_data[['interviewer']] <- factor(
  combined_data[['interviewer']],
  levels = var_val_labels$val_text,
  labels = var_val_labels$val
  )

combined_data[['interviewer']] <- factor(
  combined_data[['interviewer']],
  levels = var_val_labels$val,
  labels = var_val_labels$val
  )

attributes(combined_data[['interviewer']])$labels <- NULL

# CARE MANAGER

var_val_labels <- tibble::tibble(
      'val_text' = names(attributes(combined_data[['care_manager']])$labels)
    ) |>
  rowwise() |>
      mutate(
        'val' = attributes(combined_data[['care_manager']])$labels[[val_text]]
        ) |>
  ungroup()

combined_data[['care_manager']] <- factor(
  combined_data[['care_manager']],
  levels = var_val_labels$val_text,
  labels = var_val_labels$val
  )

combined_data[['care_manager']] <- factor(
  combined_data[['care_manager']],
  levels = var_val_labels$val,
  labels = var_val_labels$val
  )

attributes(combined_data[['care_manager']])$labels <- NULL
```

# Applying Attributes from Variable Map

We ensured the Label and Source were applied to each of our columns, based on the Variable Map.

```{r}
for (var_name in colnames(combined_data)){
  # Label
  attributes(
    combined_data[[var_name]]
    )$label <- pull(
      stripped_map |>
        filter(final_variable == var_name) |>
        select(attr_label)
      )
  # Source
   attributes(
     combined_data[[var_name]]
     )$source <- pull(
       stripped_map |>
        filter(final_variable == var_name) |>
        select(source)
       ) 
}
```

## Blocking Summary Statistics on PHI and Other Variables

We identified our PHI variables, for which we wanted to block summary statistics.

```{r}
blocking_vars <- pull(
  variable_map |>
    filter(phi) |>
    select(final_variable)
  )
```

# Codebook Generation

We generated our codebook, with title, subtitle, and description. We blocked summary statistics on our PHI fields.

```{r, message = FALSE, warning = FALSE}
book <- codebook(
  df = combined_data,
  title = "Link2Care Subject Data",
  no_summary_stats = blocking_vars,
  keep_blank_attributes = FALSE)
```

# Variable Map Modification for Human Legibility

We converted all entries in the `attr_var_labels` column into character values, for visibility in the Final Variable Map.

```{r}
variable_map <- variable_map |>
  mutate(attr_var_labels = as.character(attr_var_labels))
```

We verified that the interviewer and care manager variables did not reveal the names associated with the numeric identifiers.

```{r}
variable_map |>
  filter(final_variable %in% c('interviewer', 'care_manager')) |>
  select(final_variable, attr_var_labels)
```

We verified that the labels for our PHI variables did not reveal any identifying information.

```{r}
variable_map |>
  filter(
    final_variable %in% variable_map[variable_map$phi,]$final_variable
  ) |>
  select(final_variable, attr_var_labels)
```

We ensured the rows of our Variable Map were in our desired order.

```{r}
variable_map <- variable_map |>
  arrange(sec_ord, inst_ord, item_ord)
```

We reordered the columns of our Variable Map to faciliate human-legibility.

```{r}
variable_map <- variable_map |>
  relocate(
    # Final variable, then flag variables
    final_variable, calculated, drop_consolidated, phi, 
    # Order variables
    section, sec_ord, instrument, inst_ord, item_ord, 
    # Original standardized variable
    variable,
    # Source variables
    qds_v1, qds_v2, qds_v3, qds_v4, qds_v5, redcap, master_log, tlfb, ddt, 
    arrest, bridge,
    # Attribute storage variables
    attr_label, attr_var_labels, source
    )
```

We renamed the columns of our Variable Map for human-legibility once exported to Excel.

```{r}
variable_map <- variable_map |>
  rename_at(
    colnames(variable_map), 
    ~c(
      "Final Variable Name", "Calculated", "Dropped", "PHI", 
      "Section Name", "Section Order", "Instrument Name", "Instrument Order",
      "Item Order", "Original Standardized Variable Name",
      "QDS Visit 1", "QDS Visit 2", "QDS Visit 3", "QDS Visit 4", 
      "QDS Visit 5", "REDCap", "Master Log", "TLFB", "DDT", "Arrest Data",
      "Bridge Data", "Label", "Value Labels", "Source List", "Skip Pattern"
      )
    )
```

# üíæ Exporting 

## Codebook

We exported our Codebook to DOCX format

```{r}
print(book, here::here("codebooks", "Link2Care Combined Subject Data.docx"))
```

## Variable Map to Excel Format

We exported the Variable Map to an Excel file designed to be human legible.

```{r}
variable_map_path <- here::here(
   "data", "Combined Participant Data", "combined_participant_data_map.xlsx"
   )

wb <- openxlsx::createWorkbook()

openxlsx::addWorksheet(wb, "L2C Variable Map")

openxlsx::writeDataTable(wb, 1, variable_map,
                startCol = 1, startRow = 1, 
                tableStyle = "TableStyleMedium9"
                )

openxlsx::saveWorkbook(wb, variable_map_path, overwrite = TRUE)
```

## Combined Data to RDS and SAV

We exported the combined data for analyses into RDS and SAV format.

```{r}
# RDS
rds_path <- here::here(
              "data", "Combined Participant Data", 
              "combined_participant_data.rds"
            )

readr::write_rds(combined_data, rds_path)

# SAV

sav_path <- here::here(
              "data", "Combined Participant Data", 
              "combined_participant_data.sav"
            )

haven::write_sav(combined_data, sav_path)
```



```{r}
rm(book)
rm(variable_map)
rm(stripped_map)
rm(rds_path)
rm(wb)
rm(var_name)
rm(variable_map_path)
rm(sav_path)
rm(combined_data)
rm(blocking_vars)
rm(var_val_labels)
```

