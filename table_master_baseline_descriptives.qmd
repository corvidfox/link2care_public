---
title: "Master Baseline Descriptives Table"
format: gfm
---

# Overview

This file generates a table containing baseline descriptive statistics for every survey data variable collected.


# Load packages

```{r message=FALSE}
library(dplyr)
library(haven)
library(stringr)
library(tidyr)
library(meantables)
library(freqtables)
library(purrr)
library(flextable)
library(officer)
library(codebookr)
```


# Import data

Import `combined_participant_data.rds`. This dataset is created in `data_survey_21_merge.Rmd`.

```{r}
l2c_survey <- readr::read_rds("../Participant Data/R Data/combined_participant_data.rds")
```

```{r}
dim(l2c_survey) # 1614 1299
```

## Keep vist 1 and 2 only

This is a table of baseline statistics. We will only need visit 1, and in a handful of cases, visit 2.

```{r}
l2c_survey_baseline <- filter(l2c_survey, visit == 1 | visit == 2)
```

```{r}
dim(l2c_survey_baseline) # 849 1299
```

```{r}
rm(l2c_survey)
```

# Import list of analysis variables

Normally, I wouldn't do it this way, but there are just so many variables that it's easier to keep track of them all and keep them in order using a spreadsheet.

```{r}
analysis_vars    <- readxl::read_excel("codebooks/master_baseline_descriptive_table_vars.xlsx")
continuous_vars  <- analysis_vars %>% filter(cat == 0) %>% pull(var)
categorical_vars <- analysis_vars %>% filter(cat == 1) %>% pull(var)
```

See if any of the variable names need to change

```{r}
names_l2c_survey <- names(l2c_survey_baseline)
names_analysis_vars <- analysis_vars$var
setdiff(names_analysis_vars, names_l2c_survey)
```


# Make table from codebook

What would it look like to make the table from the codebook?

1. Add an attribute that tells R I want to use the variable in the Master table?

2. Decide which stats to use based on the column type?

```{r}
# Take a small sample of the data to experiment with.
set.seed(123)
ids <- unique(l2c_survey_baseline$id)
ids <- sample(ids, 100)
l2c_sample <- l2c_survey_baseline |> 
  filter(id %in% ids) |> 
  arrange(id, visit)
dim(l2c_sample) # 193 1299
```

Let's actually make it REALLY small for now.

```{r}
l2c_sample <- l2c_sample |> 
  select(id:ml_age)
dim(l2c_sample) # 193   9
```

Start with the end in mind. What do I want to end up with?

```{r}
mater_table_analysis_list <- tibble(
  # col = column to include in the master table
  col = c("ml_gender", "ml_age"),
  # baseline_visit = Which visit are we using for baseline?
  # For some it is 1 for others it is 2.
  baseline_vist = c(1, 1),
  # cat = Is it a categorical variable?
  cat = c(1, 0)
) |> 
  print()
```

How do we use this table to do the analysis? We can just follow the basic process laid out in `table_baseline_descriptives.Rmd`.

Add an attribute that tells R I want to use the variable in the Master table

```{r}
l2c_sample <- l2c_sample |>
  
  cb_add_col_attributes(
    ml_gender, 
    description = "Master log gender",
    source = "Mater Log",
    col_type = "Categorical",
    master_table = TRUE,
    baseline_visit = 1
  ) |> 
  
  cb_add_col_attributes(
    ml_age,
    description = "Master log age",
    source = "Mater Log",
    col_type = "Numeric",
    master_table = TRUE,
    baseline_visit = 1
  )
```

Can I create a data frame of columns to use in the master table, along with their column type, from this data frame?

```{r}
attributes(l2c_sample$ml_gender)
```

```{r}
column_attributes <- names(attributes(l2c_sample$ml_gender))
master_table_attribute <- "master_table" %in% column_attributes
```

Loop over every variable, read its attributes and use that information to create `master_table_analysis_vars`

```{r}
create_mater_table_analysis_list <- function(col, idx) {
  # Get a vector of all of the attributes for the current column in the loop.
  column_attributes <- names(attributes(col))
  
  # Does the current column have the master_table attribute?
  # If so, include it in the table. If not, don't.
  has_master_table_attribute <- "master_table" %in% column_attributes
  
  # Create df row
  if (has_master_table_attribute) {
    # Get the column name
    col_name <- deparse(substitute(col))
    
    # baseline_visit = Which visit are we using for baseline?
    # For some it is 1 for others it is 2.
    baseline_vist <- attr(col, "baseline_visit")
    
    # cat = Is it a categorical variable?
    # First, see if the column type is character or factor
    # Second, see if there is a Categorical col_type attribute
    # If not, then set cat to 0.
    col_class <- tolower(class(col))
    col_type  <- tolower(attr(col, "col_type"))
    cat <- 0
    if ("character" %in% col_class || "factor" %in% col_class) cat <- 1
    if ("categorical" %in% col_type) cat <- 1
    
    out <- data.frame(
      col_name,
      baseline_vist,
      cat
    )
    
    # Return df row
    out
  }
}

# For testing
create_mater_table_analysis_list(l2c_sample$ml_gender)
```

```{r}
# Tweaking a little bit to work with purrr.
# Specifically, we have to use imap to grab the column name.
create_mater_table_analysis_list <- function(col, idx) {
  # Get a vector of all of the attributes for the current column in the loop.
  column_attributes <- names(attributes(col))
  
  # Does the current column have the master_table attribute?
  # If so, include it in the table. If not, don't.
  has_master_table_attribute <- "master_table" %in% column_attributes
  
  # Create df row
  if (has_master_table_attribute) {
    # Get the column name
    col_name <- idx
    
    # baseline_visit = Which visit are we using for baseline?
    # For some it is 1 for others it is 2.
    baseline_vist <- attr(col, "baseline_visit")
    
    # cat = Is it a categorical variable?
    # First, see if the column type is character or factor
    # Second, see if there is a Categorical col_type attribute
    # If not, then set cat to 0.
    col_class <- tolower(class(col))
    col_type  <- tolower(attr(col, "col_type"))
    cat <- 0
    if ("character" %in% col_class || "factor" %in% col_class) cat <- 1
    if ("categorical" %in% col_type) cat <- 1
    
    out <- data.frame(
      col_name,
      baseline_vist,
      cat
    )
    
    # Return df row
    out
  }
}

# For testing
create_mater_table_analysis_list(l2c_sample$ml_gender, "ml_gender")
```


```{r}
create_mater_table_analysis_list <- imap_dfr(
  l2c_sample,
  create_mater_table_analysis_list
)

create_mater_table_analysis_list
```

This works. Now, we should just be able to apply it to every column of interest in the l2c data frame. Then, we can use the rest of the code in `table_baseline_descriptives.Rmd` to create a Word table.


























